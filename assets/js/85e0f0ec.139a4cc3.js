"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[1195],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>s});var i=t(96540);const a={},o=i.createContext(a);function r(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),i.createElement(o.Provider,{value:n},e.children)}},47618:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"advanced/simulation/intro","title":"Service Simulation","description":"The simulation is beta and may still change","source":"@site/docs/advanced/simulation/intro.md","sourceDirName":"advanced/simulation","slug":"/advanced/simulation/intro","permalink":"/docs/advanced/simulation/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/apigear-io/apigear-docs/edit/main/docs/advanced/simulation/intro.md","tags":[],"version":"current","lastUpdatedAt":1753189120000,"sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"docsSidebar","previous":{"title":"Rules Document","permalink":"/docs/advanced/maker/rules"},"next":{"title":"Simulation Scenarios","permalink":"/docs/advanced/simulation/scenario"}}');var a=t(74848),o=t(28453);const r={sidebar_position:1},s="Service Simulation",c={},l=[{value:"Why?",id:"why",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"Running the simulation",id:"running-the-simulation",level:2},{value:"Simulation Protocol",id:"simulation-protocol",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"service-simulation",children:"Service Simulation"})}),"\n",(0,a.jsx)(n.admonition,{title:"Beta",type:"warning",children:(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.strong,{children:"simulation"})," is beta and may still change"]})}),"\n",(0,a.jsx)(n.h2,{id:"why",children:"Why?"}),"\n",(0,a.jsx)(n.p,{children:"Simulation of services helps to predict the data and behavior of services through virtual objects. Simulation is used to diagnose problems and to test otherwise difficult to establish behavior. A typical use case is to enable designers to run a user interface without being depending or to wait for a service implementation. This gets even more important when the service runs on embedded or automotive systems where hardware access is often limited."}),"\n",(0,a.jsx)(n.p,{children:"An object is a virtual entity that can be created and destroyed and it has state and behavior as well notifies the world of changes. Objects are accessed through a protocol adapter that is implemented by the simulation server."}),"\n",(0,a.jsx)(n.p,{children:"The simulation shares the same API as a production service and can be used to validate the use of an API without having to implement the actual service. The simulation is interchangeable with a real service and can be used in the same way."}),"\n",(0,a.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,a.jsx)(n.p,{children:"A simulation file is a JavaScript file which contains typically one simulation scenario. The file creates all API endpoints using an actor. The initial simulation can be auto generated by the  template system and then extended by the developer or simply written by hand."}),"\n",(0,a.jsx)(n.p,{children:"To explain the concept we will use a simple example."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"module demo\n\ninterface Counter {\n  count: int\n  increment()\n  decrement()\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"The counter example shows a simple interface which can be used to increment or decrement a reactive counter. The simulation file will look like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-javascript",children:'// counter.js\n\n// create a service based on module and interface name and provide initial properties\nconst counter = $createService("demo.Counter", { count: 0 });\n\n// react to changes of the count property\ncounter.on("count", function(value) {\n  console.log("count changed to " + value);\n});\n\n\n// provide an implementation for the increment operation\ncounter.increment = function() {\n  // modify the count property using \'this\', this will trigger the count property change event\n  this.count++;\n};\n\n// provide an implementation for the decrement operation\ncounter.decrement = function() {\n  this.count--;\n};\n\n// provide an autorun function which will be called when the simulation is started\nfunction main() {\n  for (let i = 0; i < 10; i++) {\n    counter.increment();\n    counter.decrement();\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"To run the simulation we need to start the server and then run the simulation file. The server will then start the simulation and provide the simulation interface to the client."}),"\n",(0,a.jsx)(n.p,{children:"The simulation template will generate a simulation stub as also typescript type definitions to provide a better developer experience."}),"\n",(0,a.jsx)(n.mermaid,{value:"graph LR\n  App -. objectlink .-> Simulation"}),"\n",(0,a.jsx)(n.h2,{id:"running-the-simulation",children:"Running the simulation"}),"\n",(0,a.jsx)(n.p,{children:"To run the simulation file we now can use the following command:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"apigear sim run counter.js\n"})}),"\n",(0,a.jsx)(n.p,{children:"This contact the server and sends the simulation file to the simulation server and runs it. The simulation server will create actors and run the main function, if available. Now the simulation server waits for API calls from the client."}),"\n",(0,a.jsx)(n.p,{children:"Now you need a client to connect to the simulation server over ObjectLink and trigger the simulation. You can either:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Build a client using one of the ObjectLink client SDKs"}),"\n",(0,a.jsxs)(n.li,{children:["Use the ",(0,a.jsx)(n.a,{href:"/docs/advanced/stimulation/intro",children:"stimulation tool"})," to create JavaScript-based test clients"]}),"\n"]}),"\n",(0,a.jsx)(n.h2,{id:"simulation-protocol",children:"Simulation Protocol"}),"\n",(0,a.jsxs)(n.p,{children:["The underlying simulation protocol is the way to interact with a simulation server. It defines how to call operations, how to get the state of an interface and how to trigger sequences. The simulation server currently supports the ObjectLink protocol which is available in the ",(0,a.jsx)(n.a,{href:"/docs/advanced/protocols/objectlink/intro",children:"ObjectLink"})," section."]})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);