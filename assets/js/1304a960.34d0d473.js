"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[2039],{8197:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var s=n(4848),r=n(8453);const a={sidebar_position:1},o="Introduction",i={id:"advanced/maker/intro",title:"Introduction",description:"ApiGear offers a large set of pre-made technology templates covering the major programming languages and technologies.",source:"@site/docs/advanced/maker/intro.md",sourceDirName:"advanced/maker",slug:"/advanced/maker/intro",permalink:"/docs/advanced/maker/intro",draft:!1,unlisted:!1,editUrl:"https://github.com/apigear-io/apigear-docs/edit/main/docs/advanced/maker/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"Advanced Guides",permalink:"/docs/category/advanced-guides"},next:{title:"Quick Start",permalink:"/docs/advanced/maker/tutorial"}},l={},d=[{value:"Maker",id:"maker",level:2},{value:"Creating a template",id:"creating-a-template",level:2},{value:"Your first template",id:"your-first-template",level:2}];function c(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"introduction",children:"Introduction"})}),"\n",(0,s.jsx)(t.p,{children:"ApiGear offers a large set of pre-made technology templates covering the major programming languages and technologies.\nBut often a project requires some adaptations to the templates or require support for a different technology which is not yet covered."}),"\n",(0,s.jsx)(t.p,{children:"ApiGear was designed to allow customers easily to adapt the existing templates for the specifics of each customer project."}),"\n",(0,s.jsx)(t.p,{children:"Customers can provide their own technology templates, either as open source or proprietary templates."}),"\n",(0,s.jsx)(t.p,{children:"The process to adapt an existing template or to create a fresh new template is not really difficult and will be covered here."}),"\n",(0,s.jsx)(t.h2,{id:"maker",children:"Maker"}),"\n",(0,s.jsx)(t.p,{children:"A user which creates templates is called a maker. Normally is is possible to contribute to existing templates to enhance in an open discussion the quality for everyone. But often there is also a desire to solve a new problem or to create a project specific adaptation. In these cases it makes sense to fork a template or to create a new template."}),"\n",(0,s.jsx)(t.p,{children:"templates allows you to solve all kind of API structured problems in a very easy way."}),"\n",(0,s.jsx)(t.h2,{id:"creating-a-template",children:"Creating a template"}),"\n",(0,s.jsx)(t.p,{children:"A template is a folder with a common structure consisting of a rules document, which controls the code generation process and the templates folder. The templates will be listed inside a rules document. Later a solution document will link the template with API modules for code generation."}),"\n",(0,s.jsx)(t.p,{children:"Below is roughly the process to create and develop a template"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Create a template folder with rules document and templates folder"}),"\n",(0,s.jsx)(t.li,{children:"Create an ApiGear Studio API project with a demo API"}),"\n",(0,s.jsx)(t.li,{children:"Add a solution to the API project to link API modules with the template"}),"\n",(0,s.jsx)(t.li,{children:"Edit the template and re-generate the output"}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["The templates are written using the ",(0,s.jsx)(t.a,{href:"https://pkg.go.dev/text/template",children:"go-template"})," template language and each template should end with ",(0,s.jsx)(t.code,{children:".tpl"}),". ApiGear extends the template language by custom programming language specific filters to ease many complex tasks."]}),"\n",(0,s.jsxs)(t.p,{children:["The Go-Template is used in several projects and is well documented. The ApiGear extensions are documented in the ",(0,s.jsx)(t.a,{href:"/docs/advanced/maker/filters",children:"Filters"})," section."]}),"\n",(0,s.jsx)(t.h2,{id:"your-first-template",children:"Your first template"}),"\n",(0,s.jsx)(t.p,{children:"A typical template folder structure looks like this"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"first/\n    rules.yaml\n    templates/welcome.txt.tpl\n"})}),"\n",(0,s.jsx)(t.p,{children:"The rules document is a YAML document and lists all template file and how they shall be written inside the output folder. A simple rules document could look like this:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"features:\n  - name: default\n    scopes:\n      - match: system\n        documents:\n          - source: welcome.txt.tpl\n            target: welcome.txt\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The first level (here ",(0,s.jsx)(t.code,{children:"default"}),") defines a feature. This can be enabled or disabled using the feature settings for the code generator.\nThe next level (here ",(0,s.jsx)(t.code,{children:"system"}),") defines to which symbol is shall be applied. A symbol is a defined location inside the API description."]}),"\n",(0,s.jsx)(t.p,{children:"Inside an API there exists the following symbols:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"system"}),": will be applied once for the root level system"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"module"}),": will be applied for each module in the system"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"interface"}),": will be is applied for each interface inside the module"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"struct"}),": will be is applied for each struct inside the module"]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"enum"}),": will be is applied for each enum inside the module"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"For each of these symbols inside the API description the target documents are written based on the source template."}),"\n",(0,s.jsx)(t.p,{children:"You could think of the underlying logic of a rules document like this (using a python pseudo-code):"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-py",children:"system = ...\nwrite_system_documents()\nfor module in system.modules:\n    write_module_documents()\n    for interface in module.interfaces:\n        write_interface_documents()\n    for struct in module.structs:\n        write_struct_documents()\n    for enum in module.enums:\n        write_enum_documents()\n"})}),"\n",(0,s.jsx)(t.p,{children:"Here is a more elaborate example of a rules document:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-yaml",children:"# rules.yaml\nfeatures:\n  - name: default\n    scopes:\n      - match: system\n        documents:\n          - source: system.md.tpl\n            target: system.md\n      - match: module\n        documents:\n          - source: module.md.tpl\n            target: {{.Module.Name}}.md\n      - match: interface:\n        documents:\n          - source: interface.md.tpl\n            target: {{.Interface.Name}}.md\n      - match: struct\n        documents:\n          - source: struct.md.tpl\n            target: {{.Struct.Name}}.md\n      - match: enum\n        documents:\n          - source: enum.md.tpl\n            target: {{.Enum.Name}}.md\n  - name: summary\n    scopes:\n      - match: system\n        documents:\n          - source: summary.md.tpl\n            target: summary.md\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)("code",{"v-pre":!0,children:"{{ }}"})," are a template expression. For example ",(0,s.jsx)("code",{"v-pre":!0,children:"{{.Module.Name}}"})," will be replaced with the content of module name. This allows you to write exactly these document names you require."]}),"\n",(0,s.jsxs)(t.p,{children:["Additional to the template tags, the template engine also support filters. A filter is a function which takes a object and return a string. For example ",(0,s.jsx)("code",{"v-pre":!0,children:"{{ lower .Module.Name }}"})," or ",(0,s.jsx)("code",{"v-pre":!0,children:"{{ .Module.Name | lower }}"})," will lower case the module name. There are more filters in the in our filters documentation."]})]})}function m(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>i});var s=n(6540);const r={},a=s.createContext(r);function o(e){const t=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(a.Provider,{value:t},e.children)}}}]);