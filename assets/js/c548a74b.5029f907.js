"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[3305],{31302:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"advanced/simulation/api","title":"JavaScript API","description":"Most examples in the API documentation are based on an API definition for a counter example.","source":"@site/docs/advanced/simulation/api.md","sourceDirName":"advanced/simulation","slug":"/advanced/simulation/api","permalink":"/docs/advanced/simulation/api","draft":false,"unlisted":false,"editUrl":"https://github.com/apigear-io/apigear-docs/edit/main/docs/advanced/simulation/api.md","tags":[],"version":"current","lastUpdatedAt":1750096349000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"Simulation Szenarios","permalink":"/docs/advanced/simulation/scenario"},"next":{"title":"Simulation Examples","permalink":"/docs/advanced/simulation/examples"}}');var i=r(74848),t=r(28453);const c={sidebar_position:3},a="JavaScript API",l={},o=[{value:"$createService",id:"createservice",level:3},{value:"$getService",id:"getservice",level:3},{value:"$listServices",id:"listservices",level:3},{value:"$destroyService",id:"destroyservice",level:3},{value:"Service",id:"service",level:2},{value:"Properties",id:"properties",level:3},{value:"service.$.setProperty",id:"servicesetproperty",level:4},{value:"service.$.getProperty",id:"servicegetproperty",level:4},{value:"service.$.onProperty",id:"serviceonproperty",level:4},{value:"service.$.getProperties",id:"servicegetproperties",level:4},{value:"service.$.setProperties",id:"servicesetproperties",level:4},{value:"service.$.getProperties",id:"servicegetproperties-1",level:4},{value:"Methods",id:"methods",level:3},{value:"service.$.onMethod",id:"serviceonmethod",level:4},{value:"service.$.getMethod",id:"servicegetmethod",level:4},{value:"service.$.hasMethod",id:"servicehasmethod",level:4},{value:"service.$.callMethod",id:"servicecallmethod",level:4},{value:"Signals",id:"signals",level:3},{value:"service.$.onSignal",id:"serviceonsignal",level:4},{value:"service.$.emitSignal",id:"serviceemitsignal",level:4}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"javascript-api",children:"JavaScript API"})}),"\n",(0,i.jsx)(n.p,{children:"Most examples in the API documentation are based on an API definition for a counter example."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"module demo\n\ninterface Counter {\n    count: int\n    increment()\n    reset()\n    signal resetted()\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The examples demonstrate how to interact with the simulation server using the JavaScript API and a client based on the provided API definition."}),"\n",(0,i.jsx)(n.h3,{id:"createservice",children:"$createService"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"$createService(name:string, properties: {})\n"})}),"\n",(0,i.jsx)(n.p,{children:"Creates a service with the given name and properties and returns the service object. If an service with the given name already exists, it is returned."}),"\n",(0,i.jsx)(n.h3,{id:"getservice",children:"$getService"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"$getService(name:string)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the service with the given name. If no service with the given name exists, it will be created."}),"\n",(0,i.jsx)(n.h3,{id:"listservices",children:"$listServices"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"$listServices()\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the list of service names in the simulation."}),"\n",(0,i.jsx)(n.h3,{id:"destroyservice",children:"$destroyService"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"$destroyService(name:string)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Deletes the service with the given name from the simulation."}),"\n",(0,i.jsx)(n.h2,{id:"service",children:"Service"}),"\n",(0,i.jsx)(n.p,{children:"A service is a virtual entity that can be created and destroyed and it has state and behavior as well notifies changes. services are accessed through a protocol adapter that is implemented by the simulation server."}),"\n",(0,i.jsxs)(n.p,{children:["services can be created using the ",(0,i.jsx)(n.code,{children:"$createservice"})," method."]}),"\n",(0,i.jsxs)(n.p,{children:["Services support properties, to be accessed using the ",(0,i.jsx)(n.code,{children:".$.getProperty"})," and ",(0,i.jsx)(n.code,{children:".$.setProperty"})," methods and to be notified of changes using the ",(0,i.jsx)(n.code,{children:".$.onProperty"})," method. To return all properties of an service use the ",(0,i.jsx)(n.code,{children:".$.getProperties"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"The following example creates an service with the given name and state and returns the service. If an service with the given name already exists, it is returned."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// creates an service with the given name and state\nconst counter = $createService("counter", { count: 0 });\n\ncounter.$.setProperty("count", 10);\nconsole.log(counter.getProperty("count")); // 10\n\ncounter.$.onProperty("count", function (value) {\n    console.log("count changed", value);\n});\ncounter.$.setProperty("count", value + 1);\n// prints "count changed 11"\n'})}),"\n",(0,i.jsx)(n.h3,{id:"properties",children:"Properties"}),"\n",(0,i.jsx)(n.h4,{id:"servicesetproperty",children:"service.$.setProperty"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"service.$.setProperty(name: string, value: any)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Set the value of a property on the service."}),"\n",(0,i.jsx)(n.h4,{id:"servicegetproperty",children:"service.$.getProperty"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"service.$.getProperty(name: string): any\n"})}),"\n",(0,i.jsx)(n.p,{children:"Get the value of a property on the service."}),"\n",(0,i.jsx)(n.h4,{id:"serviceonproperty",children:"service.$.onProperty"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"service.$.onProperty(name: string, callback: (value: any) => void)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Register a callback to be called when the value of a property changes."}),"\n",(0,i.jsx)(n.p,{children:"Unregister the callback by calling the returned unsubscribe function."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const counter = $createService("counter");\nconst unsubscribe = counter.$.onProperty("count", function (value) {\n    console.log("count changed", value);\n});\ncounter.$.setProperty("count", value + 1);\n// prints "count changed 11"\n\nunsubscribe();\n'})}),"\n",(0,i.jsx)(n.h4,{id:"servicegetproperties",children:"service.$.getProperties"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"service.$.getProperties(): string[]\n"})}),"\n",(0,i.jsx)(n.h4,{id:"servicesetproperties",children:"service.$.setProperties"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"service.$.setProperties(properties: {})\n"})}),"\n",(0,i.jsx)(n.p,{children:"Set the properties on the service."}),"\n",(0,i.jsx)(n.h4,{id:"servicegetproperties-1",children:"service.$.getProperties"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"service.$.getProperties(): {}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Get the properties on the service."}),"\n",(0,i.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(n.h4,{id:"serviceonmethod",children:"service.$.onMethod"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"service.$.onMethod(name: string, fn: (...args): any)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Set method on the service."}),"\n",(0,i.jsx)(n.h4,{id:"servicegetmethod",children:"service.$.getMethod"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"service.$.getMethod(name: string): (...args) => any\n"})}),"\n",(0,i.jsx)(n.p,{children:"Get method on the service."}),"\n",(0,i.jsx)(n.h4,{id:"servicehasmethod",children:"service.$.hasMethod"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"service.$.hasMethod(name: string): boolean\n"})}),"\n",(0,i.jsx)(n.p,{children:"Check if the service has a method."}),"\n",(0,i.jsx)(n.h4,{id:"servicecallmethod",children:"service.$.callMethod"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"service.$.callMethod(name: string, ...args): any\n"})}),"\n",(0,i.jsx)(n.p,{children:"Call a method on the service."}),"\n",(0,i.jsx)(n.h3,{id:"signals",children:"Signals"}),"\n",(0,i.jsx)(n.h4,{id:"serviceonsignal",children:"service.$.onSignal"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"service.$.onSignal(name: string, callback: (...args) => void)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Register a callback to be called when a signal is emitted."}),"\n",(0,i.jsx)(n.p,{children:"Unregister the callback by calling the returned unsubscribe function."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const counter = createService("counter");\nconst unsubscribe = counter.$.onSignal("incremented", function (args) {\n    console.log("incremented signal", args);\n});\ncounter.$.emitSignal("incremented", 1);\n// prints "incremented signal 1"\nunsubscribe(); // unregister the callback\n'})}),"\n",(0,i.jsx)(n.h4,{id:"serviceemitsignal",children:"service.$.emitSignal"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"service.$.emitSignal(name: string, ...args)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Emit a signal on the service."})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>a});var s=r(96540);const i={},t=s.createContext(i);function c(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);