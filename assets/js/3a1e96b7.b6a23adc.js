"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[2541],{326:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>c,toc:()=>h});var t=s(4848),a=s(8453),i=s(1432),r=s(4214);const l={sidebar_position:1},o="API",c={id:"features/api",title:"API",description:"The feature api is the bare minimum for the code generation. What you receive is:",source:"@site/template-docs/template-qt6/docs/docs/features/api.md",sourceDirName:"features",slug:"/features/api",permalink:"/template-qt6/docs/features/api",draft:!1,unlisted:!1,editUrl:"https://github.com/apigear-io/template-qtcpp/edit/main/docs/docs/features/api.md",tags:[],version:"current",lastUpdatedAt:171408518e4,sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSidebar",previous:{title:"Features",permalink:"/template-qt6/docs/features/"},next:{title:"Stubs",permalink:"/template-qt6/docs/features/stubs"}},d={},h=[{value:"File overview for module",id:"file-overview-for-module",level:3},{value:"Api",id:"api-1",level:3},{value:"Enums",id:"enums",level:4},{value:"Structs",id:"structs",level:4},{value:"Interfaces",id:"interfaces",level:4},{value:"Other",id:"other",level:3}];function p(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"api",children:"API"})}),"\n",(0,t.jsxs)(n.p,{children:["The feature ",(0,t.jsx)(n.code,{children:"api"})," is the bare minimum for the code generation. What you receive is:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["abstract ",(0,t.jsx)(n.code,{children:"QObject"})," base class for each ",(0,t.jsx)(n.em,{children:"interface"})]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.em,{children:"enums"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.em,{children:"structs"})," with a basic implementation"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["To use the your API in ",(0,t.jsx)(n.code,{children:"QML"})," directly see the ",(0,t.jsx)(n.a,{href:"/template-qt6/docs/features/qmlplugin",children:"plugin"})," feature which adds QML wrappers and factory implementation for interfaces, factories for structures and creates a module plugin for the api types."]})}),"\n",(0,t.jsx)(n.h3,{id:"file-overview-for-module",children:"File overview for module"}),"\n",(0,t.jsx)(n.p,{children:"With an example API"}),"\n",(0,t.jsxs)(s,{children:[(0,t.jsx)("summary",{children:"Hello World API (click to expand)"}),(0,t.jsx)(i.A,{language:"yaml",showLineNumbers:!0,children:r.A})]}),"\n",(0,t.jsx)(n.p,{children:"the following file structure will be generated. The purpose and content of each file is explained below."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",metastring:"{7}",children:"\ud83d\udcc2hello-world\n \u2523 \ud83d\udcc2apigear\n \u2523 \ud83d\udcc2qt_hello_world\n \u2503 \u2523 \ud83d\udcc2apigear\n \u2503 \u2523 \ud83d\udcc2examples\n \u2503 \u2523 \ud83d\udcc2io_world\n \u2503 \u2503 \u2523 \ud83d\udcc2api\n \u2503 \u2503 \u2503  \u2523 \ud83d\udcdcapi.cpp\n \u2503 \u2503 \u2503  \u2523 \ud83d\udcdcapi.h\n \u2503 \u2503 \u2503  \u2523 \ud83d\udcdciapifactory.h\n \u2503 \u2503 \u2503  \u2523 \ud83d\udcdcjson.adapter.h\n \u2503 \u2503 \u2503  \u2517 \ud83d\udcdcCMakeLists.txt\n ...\n"})}),"\n",(0,t.jsx)(n.h3,{id:"api-1",children:"Api"}),"\n",(0,t.jsxs)(n.p,{children:["Files ",(0,t.jsx)(n.code,{children:"\ud83d\udcdcapi.h"})," and ",(0,t.jsx)(n.code,{children:"\ud83d\udcdcapi.cpp"})," contain the api: interfaces, data structures and enums."]}),"\n",(0,t.jsx)(n.h4,{id:"enums",children:"Enums"}),"\n",(0,t.jsxs)(n.p,{children:["Each enum is exposed to qml and their metatype is declared with ",(0,t.jsx)(n.code,{children:"Q_DECLARE_METATYPE"}),".\nFor convenience of use each enum has:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"toEnum"})," function converts given ",(0,t.jsx)(n.code,{children:"quint8"})," to enum value."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"QDataSteram"})," in and out operators for the enum."]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"structs",children:"Structs"}),"\n",(0,t.jsx)(n.p,{children:"Each struct has its fields exposed for qml"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",metastring:'title="api.h"',children:"...\nstruct IO_WORLD_API_EXPORT Message\n{\n    Q_GADGET\n    Q_PROPERTY(QString content MEMBER m_content )\n...\n"})}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["We generate the import/export statements (here IO_WORLD_API_EXPORT) for all the classes and structs that have an implementation in a ",(0,t.jsx)(n.em,{children:"cpp"})," file and may be used outside of the library."]})}),"\n",(0,t.jsx)(n.p,{children:"For convenience of use each structure has:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"equality comparison operators"}),"\n",(0,t.jsxs)(n.li,{children:["the ",(0,t.jsx)(n.code,{children:"QDataSteram"})," in and out operators for the generated struct ",(0,t.jsx)(n.code,{children:"Message"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The struct metatype is declared with ",(0,t.jsx)(n.code,{children:"Q_DECLARE_METATYPE"}),". That may not be enough if you want to bind to fields of the struct in qml. In that case we suggest using a ",(0,t.jsx)(n.a,{href:"/template-qt6/docs/features/qmlplugin",children:"plugin"})," which provides factory for it."]}),"\n",(0,t.jsx)(n.h4,{id:"interfaces",children:"Interfaces"}),"\n",(0,t.jsxs)(n.p,{children:["Base interface version for Qt template is a QObject Abstract base class, here ",(0,t.jsx)(n.code,{children:"AbstractHello"}),". ",(0,t.jsx)("br",{}),"\nIt contains:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["a pure virtual ",(0,t.jsx)(n.code,{children:"getters"})," and a ",(0,t.jsx)(n.code,{children:"setters"})," for each property"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"   virtual void setLast(const Message& last) = 0;\n   virtual Message last() const = 0;\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"pure virtual functions for each operation"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"virtual int say(const Message& msg, When::WhenEnum when) = 0;\n"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"signals: for each api signal and for each api property - on property changed signal"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-cpp",children:"signals:\n    void justSaid(const Message& msg);\n    void lastChanged(const Message& last);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"other",children:"Other"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"\ud83d\udcdc CMakeLists.txt"})," for building this module, describing it's dependencies, and exposing built package for other features that will use it.\n",(0,t.jsx)(n.code,{children:"\ud83d\udcdc json.adapter.h"})," prepares adapters for structs to easy read from or write to ",(0,t.jsx)(n.code,{children:"nlohmann::json"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"Message message = json.get<Message>();\nnlohmann::json message = message;\n"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"\ud83d\udcdciapifactory.h"})," provides an interface for ApiFactory which can produce your interface instances, here the ",(0,t.jsx)(n.code,{children:"AbstractHello"})," instance. It's purpose is to provide the chosen implementation to a QML wrappers.\nThe factory main implementation is provided by the ",(0,t.jsx)(n.a,{href:"/template-qt6/docs/features/qmlplugin",children:"qmlplugin"}),", which explains its purpose and usage in details.\nYou can also find implementation of factory interface in ",(0,t.jsx)(n.a,{href:"stubs",children:"stubs"}),", ",(0,t.jsx)(n.a,{href:"/template-qt6/docs/features/monitor",children:"monitor"})," and ",(0,t.jsx)(n.a,{href:"/template-qt6/docs/features/olink",children:"olink"})," features. They all allow creating different ",(0,t.jsx)(n.code,{children:"AbstractHello"})," backend for QML wrapper."]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},4214:(e,n,s)=>{s.d(n,{A:()=>t});const t='schema: apigear.module/1.0\nname: io.world\nversion: "1.0.0"\n\ninterfaces:\n  - name: Hello\n    properties:\n      - { name: last, type: Message }\n    operations:\n      - name: say\n        params:\n          - { name: msg, type: Message }\n          - { name: when, type: When }\n        return:\n          type: int\n    signals:\n      - name: justSaid\n        params:\n          - { name: msg, type: Message }\nenums:\n  - name: When\n    members:\n      - { name: Now, value: 0 }\n      - { name: Soon, value: 1 }\n      - { name: Never, value: 2 }\nstructs:\n  - name: Message\n    fields:\n      - { name: content, type: string }\n'}}]);