"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[6547],{28453:(e,a,n)=>{n.d(a,{R:()=>o,x:()=>i});var t=n(96540);const l={},r=t.createContext(l);function o(e){const a=t.useContext(r);return t.useMemo(function(){return"function"==typeof e?e(a):{...a,...e}},[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:o(e.components),t.createElement(r.Provider,{value:a},e.children)}},61408:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>s});const t=JSON.parse('{"id":"guide/calculator","title":"Calculator API Demo","description":"A calculator allows you to enter numbers and calculate a new value based on different operations. Our calculator will support add, subtract, multiply and divide operations as well as a clear action. The calculator always has a total value to show the current calculated value.","source":"@site/docs/guide/calculator.md","sourceDirName":"guide","slug":"/guide/calculator","permalink":"/docs/guide/calculator","draft":false,"unlisted":false,"editUrl":"https://github.com/apigear-io/apigear-docs/edit/main/docs/guide/calculator.md","tags":[],"version":"current","lastUpdatedAt":1675172564000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"Counter API Demo","permalink":"/docs/guide/counter"},"next":{"title":"Tools","permalink":"/docs/category/tools"}}');var l=n(74848),r=n(28453);const o={sidebar_position:3},i="Calculator API Demo",c={},s=[{value:"Defining an API Module",id:"defining-an-api-module",level:2},{value:"Python Interface",id:"python-interface",level:2},{value:"Sample Implementation",id:"sample-implementation",level:2},{value:"API Updates",id:"api-updates",level:2}];function d(e){const a={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(a.header,{children:(0,l.jsx)(a.h1,{id:"calculator-api-demo",children:"Calculator API Demo"})}),"\n",(0,l.jsxs)(a.p,{children:["A calculator allows you to enter numbers and calculate a new value based on different operations. Our calculator will support ",(0,l.jsx)(a.code,{children:"add"}),", ",(0,l.jsx)(a.code,{children:"subtract"}),", ",(0,l.jsx)(a.code,{children:"multiply"})," and ",(0,l.jsx)(a.code,{children:"divide"})," operations as well as a ",(0,l.jsx)(a.code,{children:"clear"})," action. The calculator always has a total value to show the current calculated value."]}),"\n",(0,l.jsxs)(a.p,{children:["A typical frontend would show a field to display the current total value and a grid of numbers from 0 to 9 as well as a grid for the operations ",(0,l.jsx)(a.code,{children:"+"}),", ",(0,l.jsx)(a.code,{children:"-"}),", ",(0,l.jsx)(a.code,{children:"*"}),", ",(0,l.jsx)(a.code,{children:"/"})," and the ",(0,l.jsx)(a.code,{children:"clear"})," action."]}),"\n",(0,l.jsxs)("alert",{children:["In addition to the explanation below we also created some real modules for different languages and example applications. Please check out our ",(0,l.jsx)(a.a,{href:"https://github.com/apigear-io/objectapi-demos/tree/master/calc",children:"demos over at github"})," "]}),"\n",(0,l.jsx)(a.h2,{id:"defining-an-api-module",children:"Defining an API Module"}),"\n",(0,l.jsxs)(a.p,{children:["From inside a project we create a new API module called ",(0,l.jsx)(a.code,{children:"demo.calc"})," using the ",(0,l.jsx)(a.code,{children:"Create Module"})," action and create a new interface named 'Calculator'."]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-yml",children:'schema: apigear.module/1.0\nname: demo.calc\nversion: "1.0"\n\ninterfaces:\n  - name: Calculator\n'})}),"\n",(0,l.jsx)(a.p,{children:"A typical calculator always displays the current value calculated. We will add this as a property to the interface."}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-yml",children:"interfaces:\n  - name: Calculator\n    properties:\n      - name: value\n        type: int\n"})}),"\n",(0,l.jsx)(a.p,{children:"We expect the value is always updated when a number was entered and a new operation is entered."}),"\n",(0,l.jsxs)(a.p,{children:["We add the first operation ",(0,l.jsx)(a.code,{children:"add"})," to the calculator. It takes one parameter and the number to be added."]}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-yml",children:"interfaces:\n  - name: Calculator\n    operations:\n      - name: add\n          params:\n            - name: a\n              type: int\n"})}),"\n",(0,l.jsx)(a.p,{children:"Let's add the rest of the calculator operations and the clear action."}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-yml",children:'schema: apigear.module/1.0\nname: demo.calc\nversion: "1.0"\n\ninterfaces:\n  - name: Calculator\n    properties:\n      - name: value\n        type: int\n    operations:\n      - name: add\n        params:\n          - name: a\n            type: int\n      - name: subtract\n        params:\n          - name: a\n            type: int\n      - name: multiply\n        params:\n          - name: a\n            type: int\n      - name: divide\n        params:\n          - name: a\n            type: int\n      - name: clear\n'})}),"\n",(0,l.jsxs)(a.p,{children:["We added all missing calculator operations. The clear action will reset the calculator value to ",(0,l.jsx)(a.code,{children:"0"}),"."]}),"\n",(0,l.jsx)(a.h2,{id:"python-interface",children:"Python Interface"}),"\n",(0,l.jsx)(a.p,{children:"For our implementation we configure a Python SDK as runner and generate our calculator SDK. The abstract calculator interface will look like this:"}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-python",children:"# demo_calc.py\n\nclass AbstractCalculator(object):\n  def __init__(self):\n    self.value = 0\n\n  def add(a: int):\n    raise NotImplementedError\n\n  def subtract(a: int):\n    raise NotImplementedError\n\n  def multiply(a: int):\n    raise NotImplementedError\n\n  def divide(a: int):\n    raise NotImplementedError\n\n  def clear(a: int):\n    raise NotImplementedError\n"})}),"\n",(0,l.jsx)(a.h2,{id:"sample-implementation",children:"Sample Implementation"}),"\n",(0,l.jsx)(a.p,{children:"To implement the interface we derive from the abstract calculator and implement the missing operations. A simple implementation could look like this."}),"\n",(0,l.jsx)(a.pre,{children:(0,l.jsx)(a.code,{className:"language-python",children:"\n# import our generated interfaces\nimport org_daily\n\nclass Calculator(demo_calc.AbstractCalculator):\n  def add(a: int):\n    self.value += a\n\n  def subtract(a: int):\n    self.value -= a\n\n  def multiply(a: int):\n    self.value *= a\n\n  def divide(a: int):\n    self.value /= a\n\n  def clear(a: int):\n    self.value = 0\n"})}),"\n",(0,l.jsx)(a.h2,{id:"api-updates",children:"API Updates"}),"\n",(0,l.jsx)(a.p,{children:"The next time we change the API module we need to update the abstract interface and ensure all changed operations are implemented."}),"\n",(0,l.jsx)(a.p,{children:"It is very easy now to add implementations also for other programming languages or even for a micro service using one of the many supported SDK templates."})]})}function u(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,l.jsx)(a,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}}}]);