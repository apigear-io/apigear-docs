"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[2048],{4570:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>s});var a=t(4848),i=t(8453);const o={sidebar_position:4},c="Advanced Concepts",r={id:"advanced/objectapi/advanced",title:"Advanced Concepts",description:"Advanced ObjectAPI concepts.",source:"@site/docs/advanced/objectapi/advanced.md",sourceDirName:"advanced/objectapi",slug:"/advanced/objectapi/advanced",permalink:"/docs/advanced/objectapi/advanced",draft:!1,unlisted:!1,editUrl:"https://github.com/apigear-io/apigear-docs/edit/main/docs/advanced/objectapi/advanced.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"docsSidebar",previous:{title:"API Modules",permalink:"/docs/advanced/objectapi/modules"},next:{title:"API Examples",permalink:"/docs/advanced/objectapi/examples"}},d={},s=[{value:"Document information",id:"document-information",level:2},{value:"Meta information",id:"meta-information",level:2},{value:"Compact Writing",id:"compact-writing",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"advanced-concepts",children:"Advanced Concepts"})}),"\n",(0,a.jsx)(n.p,{children:"Advanced ObjectAPI concepts."}),"\n",(0,a.jsx)(n.h2,{id:"document-information",children:"Document information"}),"\n",(0,a.jsx)(n.p,{children:"The info section allows user to add information related to the current document."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"info:\n  license: <license-identifier>\n"})}),"\n",(0,a.jsx)(n.h2,{id:"meta-information",children:"Meta information"}),"\n",(0,a.jsx)(n.p,{children:"Sometimes it is required to add additional information, which is not part of the ObjectAPI specification. For this the meta tag can be used."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"interfaces:\n  - name: Tuner\n    meta:\n      singleton: true\n      config: { port: 1024 }\n"})}),"\n",(0,a.jsx)(n.p,{children:"As the information is not part of the specification the applied code generator must have an understanding of the data. For example a C++ code generator could create a singleton type from the interface declaration."}),"\n",(0,a.jsx)(n.h2,{id:"compact-writing",children:"Compact Writing"}),"\n",(0,a.jsx)(n.p,{children:"YAML allows a compact format for single line information. This allows us to shorten API definitions considerable. For example this API"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"structs:\n  - name: Error\n    fields:\n      - name: message,\n        type: string\n      - name: code\n        type: int\n"})}),"\n",(0,a.jsx)(n.p,{children:"Can be written in a short format like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-yaml",children:"structs:\n  - name: Error\n    fields:\n      - { name: message, type: string }\n      - { name: code, type: int }\n"})})]})}function p(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>r});var a=t(6540);const i={},o=a.createContext(i);function c(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);