"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[5161],{22175:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>m});const a=JSON.parse('{"id":"advanced/simulation/examples","title":"Simulation Examples","description":"Heating Example","source":"@site/docs/advanced/simulation/examples.md","sourceDirName":"advanced/simulation","slug":"/advanced/simulation/examples","permalink":"/docs/advanced/simulation/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/apigear-io/apigear-docs/edit/main/docs/advanced/simulation/examples.md","tags":[],"version":"current","lastUpdatedAt":1750096349000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"docsSidebar","previous":{"title":"JavaScript API","permalink":"/docs/advanced/simulation/api"},"next":{"title":"Simulation Protocol","permalink":"/docs/advanced/simulation/protocols"}}');var r=t(74848),o=t(28453);const i={sidebar_position:4},s="Simulation Examples",l={},m=[{value:"Heating Example",id:"heating-example",level:2},{value:"API Definition",id:"api-definition",level:3},{value:"Simulation Script",id:"simulation-script",level:3},{value:"Ball Animation Example",id:"ball-animation-example",level:2},{value:"API Definition",id:"api-definition-1",level:3},{value:"Simulation Script",id:"simulation-script-1",level:2}];function c(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"simulation-examples",children:"Simulation Examples"})}),"\n",(0,r.jsx)(n.h2,{id:"heating-example",children:"Heating Example"}),"\n",(0,r.jsxs)(n.p,{children:["The heating example uses the proxy api with ",(0,r.jsx)(n.code,{children:"$createActor"})," to simulate a simple heating control system. The system consists of three actors: a heater, a thermostat, and a temperature sensor. The heater can be turned on and off, and it influences the temperature in the room. The thermostat can set a target temperature and switch between auto and manual mode. The temperature sensor reads the current temperature and updates it based on the heater's influence."]}),"\n",(0,r.jsx)(n.h3,{id:"api-definition",children:"API Definition"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"module heating\n\ninterface Heater {\n    isOn: bool\n    power: int\n    temperature: float\n    maxTemp: float\n    minTemp: float\n    turnOn()\n    turnOff()\n    updateTemperature(deltaTime: int)\n}\n\ninterface Thermostat {\n    targetTemperature: float\n    tolerance: float\n    mode: string\n    setTargetTemperature(temp: float)\n    checkTemperature()\n    setMode(newMode: string)\n}\n\ninterface TempSensor {\n    currentTemperature: float\n    updateInterval: int\n    lastUpdate: int\n    update()\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"simulation-script",children:"Simulation Script"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:'// Heater control system simulation\nconst heater = $createService("heating.Heater", {\n    isOn: false,\n    power: 2000, // watts\n    temperature: 20.0, // celsius\n    maxTemp: 30.0,\n    minTemp: 15.0\n});\n\nconst thermostat = $createService("heating.Thermostat", {\n    targetTemperature: 22.0,\n    tolerance: 0.5,\n    mode: \'auto\' // \'auto\' or \'manual\'\n});\n\nconst tempSensor = $createService("heating.TempSensor", {\n    currentTemperature: 20.0,\n    updateInterval: 1000, // ms\n    lastUpdate: Date.now()\n});\n\n// Heater methods\nheater.turnOn = function () {\n    if (!heater.isOn) {\n        heater.isOn = true;\n        console.log("Heater turned ON");\n    }\n}\n\nheater.turnOff = function () {\n    if (heater.isOn) {\n        heater.isOn = false;\n        console.log("Heater turned OFF");\n    }\n}\n\nheater.updateTemperature = function (deltaTime) {\n    if (heater.isOn) {\n        // Simple temperature increase model\n        // Temperature rises faster when difference to max temp is larger\n        const heatIncrease = (heater.maxTemp - heater.temperature) * 0.1;\n        heater.temperature += heatIncrease * (deltaTime / 1000);\n    } else {\n        // Natural cooling model\n        // Temperature falls faster when difference to ambient temp is larger\n        const cooling = (heater.temperature - tempSensor.currentTemperature) * 0.05;\n        heater.temperature -= cooling * (deltaTime / 1000);\n    }\n}\n\n// Thermostat methods\nthermostat.setTargetTemperature = function (temp) {\n    if (temp >= heater.minTemp && temp <= heater.maxTemp) {\n        thermostat.targetTemperature = temp;\n        console.log(`Target temperature set to ${temp}\xb0C`);\n        thermostat.checkTemperature();\n    } else {\n        console.log(`Temperature ${temp}\xb0C is outside allowed range`);\n    }\n}\n\nthermostat.checkTemperature = function () {\n    const currentTemp = tempSensor.currentTemperature;\n    const lowerBound = thermostat.targetTemperature - thermostat.tolerance;\n    const upperBound = thermostat.targetTemperature + thermostat.tolerance;\n\n    if (currentTemp < lowerBound) {\n        heater.turnOn();\n    } else if (currentTemp > upperBound) {\n        heater.turnOff();\n    }\n}\n\nthermostat.setMode = function (newMode) {\n    if (newMode === \'auto\' || newMode === \'manual\') {\n        thermostat.mode = newMode;\n        console.log(`Thermostat mode set to ${newMode}`);\n        if (newMode === \'auto\') {\n            thermostat.checkTemperature();\n        }\n    }\n}\n\n// Temperature sensor methods\ntempSensor.update = function () {\n    const now = Date.now();\n    const deltaTime = now - tempSensor.lastUpdate;\n    tempSensor.lastUpdate = now;\n\n    // Update current temperature based on heater\'s influence\n    const heatTransfer = (heater.temperature - tempSensor.currentTemperature) * 0.1;\n    tempSensor.currentTemperature += heatTransfer * (deltaTime / 1000);\n\n    // Add some random fluctuation\n    tempSensor.currentTemperature += (Math.random() - 0.5) * 0.1;\n\n    console.log(`Current temperature: ${tempSensor.currentTemperature.toFixed(1)}\xb0C`);\n\n    if (thermostat.mode === \'auto\') {\n        thermostat.checkTemperature();\n    }\n}\n\nfunction main() {\n    // Set up monitoring\n    heater.$.onProperty("isOn", function (isOn) {\n        console.log(`Heater state changed to: ${isOn ? "ON" : "OFF"}`);\n    });\n\n    tempSensor.$.onProperty("currentTemperature", function (temp) {\n        console.log(`Temperature sensor reading: ${temp.toFixed(1)}\xb0C`);\n    });\n\n    thermostat.$.onProperty("targetTemperature", function (temp) {\n        console.log(`Target temperature changed to: ${temp.toFixed(1)}\xb0C`);\n    });\n\n    // Initial setup\n    thermostat.setMode(\'auto\');\n    thermostat.setTargetTemperature(23.0); // Want it a bit warmer\n\n    // Simulate temperature changes over time\n    const simulationSteps = 10;\n    for (let i = 0; i < simulationSteps; i++) {\n        tempSensor.update();\n    }\n\n    return {\n        finalTemperature: tempSensor.currentTemperature,\n        heaterState: heater.isOn,\n        targetTemperature: thermostat.targetTemperature\n    };\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"ball-animation-example",children:"Ball Animation Example"}),"\n",(0,r.jsxs)(n.p,{children:["The ball animation example uses the proxy api with ",(0,r.jsx)(n.code,{children:"$createActor"})," to simulate a simple ball animation. The system consists of a ball actor that moves around the screen based on its velocity and acceleration. The ball bounces off the walls and changes color when it hits the edges."]}),"\n",(0,r.jsx)(n.h3,{id:"api-definition-1",children:"API Definition"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"module game\n\nstruct Vec2D {\n    x: int\n    y: int\n}\n\ninterface Ball {\n    pos: Vec2D\n    vel: Vec2D\n    acc: Vec2D\n    move()\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"simulation-script-1",children:"Simulation Script"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:'\nclass Vec2D {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n}\n\n\nconst ball = $createActor("game.Ball", {\n    pos: { x: 0, y: 0 },\n    vel: { x: 1, y: 1 },\n    acc: { x: 1, y: 1 },\n});\n\n\nball.move = function () {\n    console.log("moving", JSON.stringify(ball.$.getProperties()));\n    ball.pos = { x: ball.pos.x + ball.vel.x, y: ball.pos.y + ball.vel.y };\n    ball.vel = { x: ball.vel.x + ball.acc.x, y: ball.vel.y + ball.acc.y };\n};\n\n\nball.$.onProperty("pos", function (value) {\n    console.log("pos changed", JSON.stringify(value));\n});\n\nball.$.onProperty("vel", function (value) {\n    console.log("vel changed", JSON.stringify(value));\n});\n\nball.$.onProperty("acc", function (value) {\n    console.log("acc changed", JSON.stringify(value));\n});\n\nfunction main() {\n    console.log("running");\n    for (let i = 0; i < 10; i++) {\n        ball.move();\n    }\n    console.log("done", JSON.stringify(ball.$.getProperties()));\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var a=t(96540);const r={},o=a.createContext(r);function i(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);