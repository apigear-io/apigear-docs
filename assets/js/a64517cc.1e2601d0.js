"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[5161],{19952:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"advanced/simulation/examples","title":"Simulation Examples","description":"Heating Example","source":"@site/docs/advanced/simulation/examples.md","sourceDirName":"advanced/simulation","slug":"/advanced/simulation/examples","permalink":"/docs/advanced/simulation/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/apigear-io/apigear-docs/edit/main/docs/advanced/simulation/examples.md","tags":[],"version":"current","lastUpdatedAt":1753189120000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"docsSidebar","previous":{"title":"JavaScript API","permalink":"/docs/advanced/simulation/api"},"next":{"title":"Simulation Protocol","permalink":"/docs/advanced/simulation/protocols"}}');var i=t(74848),r=t(28453);const s={sidebar_position:4},o="Simulation Examples",l={},c=[{value:"Heating Example",id:"heating-example",level:2},{value:"API Definition",id:"api-definition",level:3},{value:"Simulation Script",id:"simulation-script",level:3},{value:"Ball Animation Example",id:"ball-animation-example",level:2},{value:"API Definition",id:"api-definition-1",level:3},{value:"Simulation Script",id:"simulation-script-1",level:3},{value:"Vehicle Dashboard Example",id:"vehicle-dashboard-example",level:2},{value:"Simulation Script",id:"simulation-script-2",level:3},{value:"Key Features of the Natural API",id:"key-features-of-the-natural-api",level:2}];function m(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"simulation-examples",children:"Simulation Examples"})}),"\n",(0,i.jsx)(n.h2,{id:"heating-example",children:"Heating Example"}),"\n",(0,i.jsx)(n.p,{children:"The heating example simulates a simple heating control system. The system consists of three services: a heater, a thermostat, and a temperature sensor. The heater can be turned on and off, and it influences the temperature in the room. The thermostat can set a target temperature and switch between auto and manual mode. The temperature sensor reads the current temperature and updates it based on the heater's influence."}),"\n",(0,i.jsx)(n.h3,{id:"api-definition",children:"API Definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"module heating\n\ninterface Heater {\n    isOn: bool\n    power: int\n    temperature: float\n    maxTemp: float\n    minTemp: float\n    turnOn()\n    turnOff()\n    updateTemperature(deltaTime: int)\n}\n\ninterface Thermostat {\n    targetTemperature: float\n    tolerance: float\n    mode: string\n    setTargetTemperature(temp: float)\n    checkTemperature()\n    setMode(newMode: string)\n}\n\ninterface TempSensor {\n    currentTemperature: float\n    updateInterval: int\n    lastUpdate: int\n    update()\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"simulation-script",children:"Simulation Script"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Heater control system simulation\nconst heater = $createService("heating.Heater", {\n    isOn: false,\n    power: 2000, // watts\n    temperature: 20.0, // celsius\n    maxTemp: 30.0,\n    minTemp: 15.0\n});\n\nconst thermostat = $createService("heating.Thermostat", {\n    targetTemperature: 22.0,\n    tolerance: 0.5,\n    mode: \'auto\' // \'auto\' or \'manual\'\n});\n\nconst tempSensor = $createService("heating.TempSensor", {\n    currentTemperature: 20.0,\n    updateInterval: 1000, // ms\n    lastUpdate: Date.now()\n});\n\n// Heater methods using natural API\nheater.turnOn = function () {\n    if (!this.isOn) {\n        this.isOn = true;\n        console.log("Heater turned ON");\n        this.emit(\'stateChanged\', true);\n    }\n}\n\nheater.turnOff = function () {\n    if (this.isOn) {\n        this.isOn = false;\n        console.log("Heater turned OFF");\n        this.emit(\'stateChanged\', false);\n    }\n}\n\nheater.updateTemperature = function (deltaTime) {\n    if (this.isOn) {\n        // Simple temperature increase model\n        // Temperature rises faster when difference to max temp is larger\n        const heatIncrease = (this.maxTemp - this.temperature) * 0.1;\n        this.temperature += heatIncrease * (deltaTime / 1000);\n    } else {\n        // Natural cooling model\n        // Temperature falls faster when difference to ambient temp is larger\n        const cooling = (this.temperature - tempSensor.currentTemperature) * 0.05;\n        this.temperature -= cooling * (deltaTime / 1000);\n    }\n}\n\n// Thermostat methods using natural API\nthermostat.setTargetTemperature = function (temp) {\n    if (temp >= heater.minTemp && temp <= heater.maxTemp) {\n        this.targetTemperature = temp;\n        console.log(`Target temperature set to ${temp}\xb0C`);\n        this.checkTemperature();\n    } else {\n        console.log(`Temperature ${temp}\xb0C is outside allowed range`);\n    }\n}\n\nthermostat.checkTemperature = function () {\n    const currentTemp = tempSensor.currentTemperature;\n    const lowerBound = this.targetTemperature - this.tolerance;\n    const upperBound = this.targetTemperature + this.tolerance;\n\n    if (currentTemp < lowerBound) {\n        heater.turnOn();\n    } else if (currentTemp > upperBound) {\n        heater.turnOff();\n    }\n}\n\nthermostat.setMode = function (newMode) {\n    if (newMode === \'auto\' || newMode === \'manual\') {\n        this.mode = newMode;\n        console.log(`Thermostat mode set to ${newMode}`);\n        if (newMode === \'auto\') {\n            this.checkTemperature();\n        }\n    }\n}\n\n// Temperature sensor methods using natural API\ntempSensor.update = function () {\n    const now = Date.now();\n    const deltaTime = now - this.lastUpdate;\n    this.lastUpdate = now;\n\n    // Update current temperature based on heater\'s influence\n    const heatTransfer = (heater.temperature - this.currentTemperature) * 0.1;\n    this.currentTemperature += heatTransfer * (deltaTime / 1000);\n\n    // Add some random fluctuation\n    this.currentTemperature += (Math.random() - 0.5) * 0.1;\n\n    console.log(`Current temperature: ${this.currentTemperature.toFixed(1)}\xb0C`);\n\n    if (thermostat.mode === \'auto\') {\n        thermostat.checkTemperature();\n    }\n}\n\nfunction main() {\n    // Set up monitoring using natural API\n    heater.on("isOn", function (isOn) {\n        console.log(`Heater state changed to: ${isOn ? "ON" : "OFF"}`);\n    });\n\n    tempSensor.on("currentTemperature", function (temp) {\n        console.log(`Temperature sensor reading: ${temp.toFixed(1)}\xb0C`);\n    });\n\n    thermostat.on("targetTemperature", function (temp) {\n        console.log(`Target temperature changed to: ${temp.toFixed(1)}\xb0C`);\n    });\n    \n    // Listen to custom signal\n    heater.on(\'stateChanged\', function(state) {\n        console.log(`Heater state signal: ${state ? "ON" : "OFF"}`);\n    });\n\n    // Initial setup\n    thermostat.setMode(\'auto\');\n    thermostat.setTargetTemperature(23.0); // Want it a bit warmer\n\n    // Simulate temperature changes over time\n    const simulationSteps = 10;\n    for (let i = 0; i < simulationSteps; i++) {\n        tempSensor.update();\n    }\n\n    return {\n        finalTemperature: tempSensor.currentTemperature,\n        heaterState: heater.isOn,\n        targetTemperature: thermostat.targetTemperature\n    };\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"ball-animation-example",children:"Ball Animation Example"}),"\n",(0,i.jsx)(n.p,{children:"The ball animation example simulates a simple ball physics system. The ball has position, velocity, and acceleration properties. The ball moves around based on its velocity and acceleration, demonstrating the natural API for property updates and signal emissions."}),"\n",(0,i.jsx)(n.h3,{id:"api-definition-1",children:"API Definition"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"module game\n\nstruct Vec2D {\n    x: int\n    y: int\n}\n\ninterface Ball {\n    pos: Vec2D\n    vel: Vec2D\n    acc: Vec2D\n    move()\n    reset()\n}\n"})}),"\n",(0,i.jsx)(n.h3,{id:"simulation-script-1",children:"Simulation Script"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Ball physics simulation using natural API\nconst ball = $createService("game.Ball", {\n    pos: { x: 0, y: 0 },\n    vel: { x: 1, y: 1 },\n    acc: { x: 1, y: 1 },\n});\n\n// Define move method using natural API with \'this\'\nball.move = function() {\n    const acc = this.acc;\n    const vel = this.vel;\n    const pos = this.pos;\n    \n    // Calculate new position and velocity\n    const newPos = { x: pos.x + vel.x, y: pos.y + vel.y };\n    const newVel = { x: vel.x + acc.x, y: vel.y + acc.y };\n    \n    // Update properties using natural assignment\n    this.pos = newPos;\n    this.vel = newVel;\n    \n    // Emit movement signal\n    this.emit(\'moved\', newPos);\n};\n\n// Reset method\nball.reset = function() {\n    this.pos = { x: 0, y: 0 };\n    this.vel = { x: 1, y: 1 };\n    this.emit(\'reset\');\n}\n\n// Monitor property changes using natural API\nball.on("pos", function (value) {\n    console.log("Position changed:", JSON.stringify(value));\n});\n\nball.on("vel", function (value) {\n    console.log("Velocity changed:", JSON.stringify(value));\n});\n\nball.on("acc", function (value) {\n    console.log("Acceleration changed:", JSON.stringify(value));\n});\n\n// Listen to custom signals\nball.on(\'moved\', function(newPos) {\n    console.log(`Ball moved to: (${newPos.x}, ${newPos.y})`);\n});\n\nball.on(\'reset\', function() {\n    console.log(\'Ball was reset to initial position\');\n});\n\nfunction main() {\n    console.log("=== Ball Physics Simulation ===");\n    \n    // Access raw properties when needed\n    console.log("Initial state:", JSON.stringify(ball.$.getProperties()));\n    \n    // Run simulation\n    for (let i = 0; i < 5; i++) {\n        console.log(`\\nStep ${i + 1}:`);\n        ball.move();\n    }\n    \n    // Access final state through raw API\n    console.log("\\nFinal state:", JSON.stringify(ball.$.getProperties()));\n    \n    // Demonstrate reset\n    console.log("\\nResetting ball...");\n    ball.reset();\n    \n    // Direct property access\n    console.log("Position after reset:", JSON.stringify(ball.pos));\n    console.log("Velocity after reset:", JSON.stringify(ball.vel));\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"vehicle-dashboard-example",children:"Vehicle Dashboard Example"}),"\n",(0,i.jsx)(n.p,{children:"This example demonstrates a more complex simulation with multiple interconnected services representing a vehicle dashboard system."}),"\n",(0,i.jsx)(n.h3,{id:"simulation-script-2",children:"Simulation Script"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const state = $createService(\"vehicle.State\", {\n    location: { x: 0, y: 0 },\n    speed: 0,\n    rpm: 0,\n    fuelLevel: 50,\n    fuelLevelWarning: false,\n    temperature: 20,\n    overheatWarning: false\n});\n\nconst indicators = $createService(\"vehicle.Indicators\", {\n    checkEngine: false,\n    oilPressure: false,\n    battery: false,\n    airbag: false,\n    brake: false,\n    seatbelt: false,\n    tractionControl: false,\n    highBeam: false\n});\n\nconst commands = $createService(\"vehicle.Commands\", {});\n\n// Command methods using natural API\ncommands.turnOn = function () {\n    const order = ['checkEngine', 'oilPressure', 'battery', 'brake', 'seatbelt', 'tractionControl', 'highBeam'];\n    let index = 0;\n    const interval = setInterval(function() {\n        if (index < order.length) {\n            const indicator = order[index];\n            indicators[indicator] = true;\n            console.log(`Turned on ${indicator}`);\n            index++;\n        } else {\n            clearInterval(interval);\n            commands.emit('allIndicatorsOn');\n        }\n    }, 200);\n}\n\ncommands.turnOff = function () {\n    // Turn off all indicators using direct property access\n    indicators.checkEngine = false;\n    indicators.oilPressure = false;\n    indicators.battery = false;\n    indicators.airbag = false;\n    indicators.brake = false;\n    indicators.seatbelt = false;\n    indicators.tractionControl = false;\n    indicators.highBeam = false;\n    this.emit('allIndicatorsOff');\n}\n\n// Add method to state service for speed updates\nstate.accelerate = function(amount = 10) {\n    this.speed += amount;\n    this.rpm = Math.min(8000, this.speed * 100);\n    \n    // Update fuel consumption\n    this.fuelLevel = Math.max(0, this.fuelLevel - amount * 0.01);\n    this.fuelLevelWarning = this.fuelLevel < 10;\n    \n    // Update temperature\n    this.temperature = Math.min(120, this.temperature + amount * 0.1);\n    this.overheatWarning = this.temperature > 100;\n}\n\nfunction main() {\n    // Set up event monitoring with natural API\n    state.on('speed', function(speed) {\n        console.log(`Speed: ${speed} km/h`);\n    });\n    \n    state.on('fuelLevelWarning', function(warning) {\n        if (warning) {\n            console.log('\u26a0\ufe0f  Low fuel warning!');\n        }\n    });\n    \n    state.on('overheatWarning', function(warning) {\n        if (warning) {\n            console.log('\u26a0\ufe0f  Engine overheating!');\n        }\n    });\n    \n    commands.on('allIndicatorsOn', function() {\n        console.log('All indicators checked');\n    });\n    \n    // Monitor specific indicator\n    indicators.on(\"checkEngine\", function (value) {\n        console.log(\"Check engine indicator:\", value ? \"ON\" : \"OFF\");\n    });\n    \n    // Run startup sequence\n    commands.turnOn();\n    \n    // Simulate driving\n    let drivingInterval = setInterval(function() {\n        state.accelerate();\n        if (state.speed >= 120 || state.fuelLevel <= 0) {\n            clearInterval(drivingInterval);\n            console.log('Stopping simulation');\n            commands.turnOff();\n        }\n    }, 500);\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"key-features-of-the-natural-api",children:"Key Features of the Natural API"}),"\n",(0,i.jsx)(n.p,{children:"The examples above demonstrate the key features of the new natural API:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Direct Property Access"}),": Properties can be read and written directly using dot notation"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsxs)(n.strong,{children:["Automatic ",(0,i.jsx)(n.code,{children:"this"})," Binding"]}),": Methods automatically receive the service proxy as ",(0,i.jsx)(n.code,{children:"this"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Unified Event Handling"}),": The ",(0,i.jsx)(n.code,{children:"on()"})," method handles both property changes and custom signals"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Signal Emission"}),": Use ",(0,i.jsx)(n.code,{children:"this.emit()"})," to emit custom signals from within methods"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Raw API Access"}),": When needed, access the underlying service object via ",(0,i.jsx)(n.code,{children:"service.$"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This natural API provides a more intuitive JavaScript development experience while maintaining full compatibility with the ObjectLink protocol."})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(m,{...e})}):m(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(96540);const i={},r=a.createContext(i);function s(e){const n=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);