"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[3305],{28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var s=t(96540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}},55468:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"advanced/simulation/api","title":"JavaScript API","description":"Most examples in the API documentation are based on an API definition for a counter example.","source":"@site/docs/advanced/simulation/api.md","sourceDirName":"advanced/simulation","slug":"/advanced/simulation/api","permalink":"/docs/advanced/simulation/api","draft":false,"unlisted":false,"editUrl":"https://github.com/apigear-io/apigear-docs/edit/main/docs/advanced/simulation/api.md","tags":[],"version":"current","lastUpdatedAt":1753189120000,"sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"docsSidebar","previous":{"title":"Simulation Scenarios","permalink":"/docs/advanced/simulation/scenario"},"next":{"title":"Simulation Examples","permalink":"/docs/advanced/simulation/examples"}}');var i=t(74848),r=t(28453);const a={sidebar_position:3},c="JavaScript API",o={},l=[{value:"$createService",id:"createservice",level:3},{value:"$getService",id:"getservice",level:3},{value:"$quit",id:"quit",level:3},{value:"Service",id:"service",level:2},{value:"Properties",id:"properties",level:3},{value:"Direct Property Access",id:"direct-property-access",level:4},{value:"service.on",id:"serviceon",level:4},{value:"Raw Service Access",id:"raw-service-access",level:4},{value:"Methods",id:"methods",level:3},{value:"Natural Method Definition",id:"natural-method-definition",level:4},{value:"Raw Method Access",id:"raw-method-access",level:4},{value:"Signals",id:"signals",level:3},{value:"service.emit",id:"serviceemit",level:4},{value:"Listening to Signals",id:"listening-to-signals",level:4},{value:"Raw Signal Access",id:"raw-signal-access",level:4},{value:"Async Operations",id:"async-operations",level:2},{value:"setTimeout",id:"settimeout",level:3},{value:"Console Output",id:"console-output",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"javascript-api",children:"JavaScript API"})}),"\n",(0,i.jsx)(n.p,{children:"Most examples in the API documentation are based on an API definition for a counter example."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"module demo\n\ninterface Counter {\n    count: int\n    increment()\n    reset()\n    signal resetted()\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The examples demonstrate how to interact with the simulation server using the JavaScript API and a client based on the provided API definition."}),"\n",(0,i.jsx)(n.h3,{id:"createservice",children:"$createService"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"$createService(name:string, properties: {})\n"})}),"\n",(0,i.jsx)(n.p,{children:"Creates a service with the given name and properties and returns the service object. If an service with the given name already exists, it is returned."}),"\n",(0,i.jsx)(n.h3,{id:"getservice",children:"$getService"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"$getService(name:string)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the service with the given name. If no service with the given name exists, it will be created."}),"\n",(0,i.jsx)(n.h3,{id:"quit",children:"$quit"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-ts",children:"$quit()\n"})}),"\n",(0,i.jsx)(n.p,{children:"Cleanly shuts down the simulation engine. This function:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Disconnects all active channels"}),"\n",(0,i.jsx)(n.li,{children:"Closes the simulation engine"}),"\n",(0,i.jsx)(n.li,{children:"Exits the simulation script"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"This is useful for gracefully terminating long-running simulations or when specific conditions are met."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Example: Stop simulation after a condition\nif (temperature > 100) {\n    console.log("Overheating detected, stopping simulation");\n    $quit();\n}\n'})}),"\n",(0,i.jsx)(n.h2,{id:"service",children:"Service"}),"\n",(0,i.jsx)(n.p,{children:"A service is a virtual entity that can be created and destroyed and it has state and behavior as well notifies changes. services are accessed through a protocol adapter that is implemented by the simulation server."}),"\n",(0,i.jsxs)(n.p,{children:["Services can be created using the ",(0,i.jsx)(n.code,{children:"$createService"})," method."]}),"\n",(0,i.jsxs)(n.p,{children:["Services support properties through a natural JavaScript API using proxies. Properties can be accessed and modified directly, and changes can be monitored using the ",(0,i.jsx)(n.code,{children:".on()"})," method."]}),"\n",(0,i.jsx)(n.p,{children:"The following example creates a service with the given name and state and returns the service. If a service with the given name already exists, it is returned."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// creates a service with the given name and state\nconst counter = $createService("counter", { count: 0 });\n\n// Direct property access and modification\ncounter.count = 10;\nconsole.log(counter.count); // 10\n\n// Monitor property changes\ncounter.on("count", function (value) {\n    console.log("count changed", value);\n});\ncounter.count = 11;\n// prints "count changed 11"\n\n// Access the raw service object when needed\nconsole.log(counter.$.getProperties()); // { count: 11 }\n'})}),"\n",(0,i.jsx)(n.h3,{id:"properties",children:"Properties"}),"\n",(0,i.jsx)(n.h4,{id:"direct-property-access",children:"Direct Property Access"}),"\n",(0,i.jsx)(n.p,{children:"Services use JavaScript proxies to provide natural property access:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Get property value\nconst value = service.propertyName;\n\n// Set property value\nservice.propertyName = newValue;\n"})}),"\n",(0,i.jsx)(n.h4,{id:"serviceon",children:"service.on"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"service.on(name: string, callback: (value: any) => void)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Register a callback to be called when a property changes or a signal is emitted."}),"\n",(0,i.jsx)(n.p,{children:"Unregister the callback by calling the returned unsubscribe function."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const counter = $createService("counter", { count: 10 });\nconst unsubscribe = counter.on("count", function (value) {\n    console.log("count changed", value);\n});\ncounter.count = 11;\n// prints "count changed 11"\n\nunsubscribe();\n'})}),"\n",(0,i.jsx)(n.h4,{id:"raw-service-access",children:"Raw Service Access"}),"\n",(0,i.jsxs)(n.p,{children:["When you need access to the underlying service object, use the ",(0,i.jsx)(n.code,{children:"$"})," property:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"// Access raw service methods\nservice.$.getProperties()  // Returns all properties as an object\nservice.$.setProperties({ prop1: value1, prop2: value2 })  // Set multiple properties\nservice.$.hasProperty(name)  // Check if property exists\nservice.$.getProperty(name)  // Get property value (alternative to direct access)\nservice.$.setProperty(name, value)  // Set property value (alternative to direct access)\n"})}),"\n",(0,i.jsx)(n.h3,{id:"methods",children:"Methods"}),"\n",(0,i.jsx)(n.h4,{id:"natural-method-definition",children:"Natural Method Definition"}),"\n",(0,i.jsxs)(n.p,{children:["Methods are defined by assigning functions to service properties. The function automatically receives the service proxy as ",(0,i.jsx)(n.code,{children:"this"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const counter = $createService(\"counter\", { count: 0 });\n\n// Define a method with automatic 'this' binding\ncounter.increment = function() {\n    this.count++;  // 'this' refers to the service proxy\n    this.emit('incremented', this.count);  // Can emit signals\n};\n\n// Call the method\ncounter.increment();\n"})}),"\n",(0,i.jsx)(n.h4,{id:"raw-method-access",children:"Raw Method Access"}),"\n",(0,i.jsx)(n.p,{children:"When needed, you can access methods through the raw service object:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Check if method exists\nservice.$.hasMethod("methodName")  // Returns boolean\n\n// Get method reference\nservice.$.getMethod("methodName")  // Returns the function\n\n// Call method through raw API\nservice.$.callMethod("methodName", arg1, arg2)  // Calls with arguments\n'})}),"\n",(0,i.jsx)(n.h3,{id:"signals",children:"Signals"}),"\n",(0,i.jsx)(n.h4,{id:"serviceemit",children:"service.emit"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"service.emit(name: string, ...args)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Emit a signal on the service."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"const counter = $createService(\"counter\", { count: 0 });\n\n// Define a method that emits a signal\ncounter.reset = function() {\n    this.count = 0;\n    this.emit('resetted');  // Emit signal with no arguments\n    this.emit('stateChanged', this.count);  // Emit with arguments\n};\n"})}),"\n",(0,i.jsx)(n.h4,{id:"listening-to-signals",children:"Listening to Signals"}),"\n",(0,i.jsxs)(n.p,{children:["Use the same ",(0,i.jsx)(n.code,{children:"on"})," method to listen for both property changes and signals:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'const counter = $createService("counter", { count: 0 });\n\n// Listen to custom signals\nconst unsubscribe = counter.on("resetted", function () {\n    console.log("Counter was reset");\n});\n\ncounter.on("stateChanged", function (newValue) {\n    console.log("State changed to:", newValue);\n});\n\n// Trigger the signals\ncounter.reset();\n// prints "Counter was reset"\n// prints "State changed to: 0"\n\nunsubscribe(); // unregister the callback\n'})}),"\n",(0,i.jsx)(n.h4,{id:"raw-signal-access",children:"Raw Signal Access"}),"\n",(0,i.jsx)(n.p,{children:"For direct signal manipulation through the raw API:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"service.$.onSignal(name, callback)  // Register signal listener\nservice.$.emitSignal(name, ...args)  // Emit signal\n"})}),"\n",(0,i.jsx)(n.h2,{id:"async-operations",children:"Async Operations"}),"\n",(0,i.jsx)(n.p,{children:"The simulation environment provides basic async support through:"}),"\n",(0,i.jsx)(n.h3,{id:"settimeout",children:"setTimeout"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:"setTimeout(callback, delay)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Schedules a function to be called after a specified delay (in milliseconds)."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Example: Delayed state change\nsetTimeout(function() {\n    heater.temperature = 25;\n    console.log("Temperature updated after delay");\n}, 1000);  // Execute after 1 second\n\n// Example: Sequential operations in vehicle example\nconst interval = setInterval(function() {\n    indicators[indicator] = true;\n    console.log(`Turned on ${indicator}`);\n}, 200);\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Note: The simulation environment currently supports ",(0,i.jsx)(n.code,{children:"setTimeout"})," and ",(0,i.jsx)(n.code,{children:"setInterval"})," but not ",(0,i.jsx)(n.code,{children:"setImmediate"}),", ",(0,i.jsx)(n.code,{children:"clearTimeout"}),", or ",(0,i.jsx)(n.code,{children:"clearInterval"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"console-output",children:"Console Output"}),"\n",(0,i.jsx)(n.p,{children:"Standard console methods are available for debugging and output:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'console.log("Info message");\nconsole.warn("Warning message");\nconsole.error("Error message");\n'})}),"\n",(0,i.jsx)(n.p,{children:"All console output is integrated with the simulation server's logging system."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}}}]);