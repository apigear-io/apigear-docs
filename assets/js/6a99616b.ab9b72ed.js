"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[3693],{5328:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>m,frontMatter:()=>s,metadata:()=>l,toc:()=>p});var o=a(4848),r=a(8453),t=a(1432),i=a(2295);const s={sidebar_position:5},c="Conan package manager",l={id:"features/conan",title:"Conan package manager",description:"With this feature you we generate a conan support for your project. It helps with packaging and to managing dependencies for different platforms, OSs, compilers, architecture, cross-builds. Read more about conan and its all benefits here.",source:"@site/template-docs/template-cpp14/docs/docs/features/conan.md",sourceDirName:"features",slug:"/features/conan",permalink:"/template-cpp14/docs/features/conan",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"defaultSidebar",previous:{title:"Monitor",permalink:"/template-cpp14/docs/features/monitor"}},d={},p=[{value:"File overview for module",id:"file-overview-for-module",level:3},{value:"Run scripts",id:"run-scripts",level:3}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components},{Details:a}=n;return a||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"conan-package-manager",children:"Conan package manager"})}),"\n",(0,o.jsxs)(n.p,{children:["With this feature you we generate a conan support for your project. It helps with packaging and to managing dependencies for different platforms, OSs, compilers, architecture, cross-builds. Read more about conan and its all benefits ",(0,o.jsx)(n.a,{href:"https://conan.io/",children:"here"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"file-overview-for-module",children:"File overview for module"}),"\n",(0,o.jsx)(n.p,{children:"With an example API"}),"\n",(0,o.jsxs)(a,{children:[(0,o.jsx)("summary",{children:"Hello World API (click to expand)"}),(0,o.jsx)(t.A,{language:"yaml",showLineNumbers:!0,children:i.A})]}),"\n",(0,o.jsx)(n.p,{children:"The files for conan will be generated for project:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",metastring:"{9}",children:"\ud83d\udcc2hello-world\n \u2523 \ud83d\udcc2apigear\n \u2523 \ud83d\udcc2cpp_hello_world\n \u2503 \u2523 \ud83d\udcc2apigear\n \u2503 \u2503 ...\n \u2503 \u2503 \u2517 \ud83d\udcdcconanfile.py\n \u2503 \u2523 \ud83d\udcc2examples\n \u2503 \u2503 \u2523 \ud83d\udcc2 app\n \u2503 \u2503 \u2503 ...\n \u2503 \u2503 \u2503 \u2517 \ud83d\udcdcconanfile.txt\n \u2503 \u2503 ... \n \u2503 \u2523 \ud83d\udcc2modules\n \u2503 \u2503 \u2517 \ud83d\udcc2io_world\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2conan\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2test_package\n \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcCMakeLists.txt\n \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcconanfile.py\n \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcdcmain.cpp\n \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcdcconanfile.py\n \u2523 \ud83d\udcc2scripts\n \u2503 \u2523 \ud83d\udcdctest_conan.bat\n \u2503 \u2523 \ud83d\udcdctest_conan.sh\n"})}),"\n",(0,o.jsx)(n.h3,{id:"run-scripts",children:"Run scripts"}),"\n",(0,o.jsxs)(n.p,{children:["The top level files you'll find in '\ud83d\udcc2hello-world/cpp_hello_world' ",(0,o.jsx)(n.code,{children:"\ud83d\udcdctest_conan.bat"})," (for windows) and ",(0,o.jsx)(n.code,{children:"\ud83d\udcdctest_conan.sh"})," (for linux based systems) contain set of command line commands to build whole project.\nThe scripts build the project twice:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Firstly, using a package development commands. This way is recommended for local development, testing and modifications/customization of the build process in the user space without recompiling the entire package. Used command is ",(0,o.jsx)(n.code,{children:"conan build .."})," (preceded by ",(0,o.jsx)(n.code,{children:"source"})," command that copies necessary sources and ",(0,o.jsx)(n.code,{children:"install"})," command which installs the requirements and generates the info files).\nYou can read more about build ",(0,o.jsx)(n.a,{href:"https://docs.conan.io/1/reference/commands/development/build.html",children:"here"}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Secondly, with one of  conan creator commands ",(0,o.jsx)(n.code,{children:"conan create ..."}),". It is primarily used to generate, package, and upload packages to a repository. It calls the local conanfile.py \u2018package()\u2019 method. The ",(0,o.jsx)(n.code,{children:"conanfile.py"})," is located in the ",(0,o.jsx)(n.code,{children:"\ud83d\udcc2modules"})," and created for each module separately. Creator Commands are more geared toward recipe creation, versioning, and repository interactions. You can read more about package ",(0,o.jsx)(n.a,{href:"https://docs.conan.io/1/reference/commands/development/package.html",children:"here"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"We use CMake build system with conan."}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsx)(n.p,{children:"Modify the script to suit your needs. You can choose one of the building methods depending on current stage of your package development lifecycle."})}),"\n",(0,o.jsxs)(n.p,{children:["Some of the above files, the ",(0,o.jsx)(n.code,{children:"\ud83d\udcc2cpp_hello_world/apigear/conanfile.py"})," or ",(0,o.jsx)(n.code,{children:"conanfiles.txt"})," generated for each example were present even without conan feature - for simplicity of generation rules. ",(0,o.jsx)("br",{}),"\nThe ",(0,o.jsx)(n.code,{children:"\ud83d\udcc2cpp_hello_world/apigear/conanfile.py"})," contains recipe for building additional library - network layer for cpp-template,  independent from your API, and necessary for ",(0,o.jsx)(n.a,{href:"https://github.com/apigear-io/objectlink-core-cpp",children:"ObjectLink core"}),", for aligning to MQTT protocol or for tracing. ",(0,o.jsx)("br",{}),"\nThe  ",(0,o.jsx)(n.code,{children:"\ud83d\udcc2cpp_hello_world\ud83d\udcc2modules/io_world/conan/conanfile.py"})," is the main recipe for your API module, which contains all the info necessary for packaging.\nDependencies for the examples are stored in conanfile.txt files in each of the examples ( conanfile.txt is a simplification of conanfile.py, that can be used exclusively to consume dependencies, but not to create packages)."]}),"\n",(0,o.jsxs)(n.p,{children:["The test package\nFiles inside the ",(0,o.jsx)(n.code,{children:"\ud83d\udcc2cpp_hello_world/modules/io_world/conan/test_package contain a test package"}),". It instantiates ",(0,o.jsx)(n.code,{children:"Hello"})," implementation from a ",(0,o.jsx)(n.code,{children:"stub"})," feature. It is a check that package for ",(0,o.jsx)(n.code,{children:"io_world"})," was created in proper way, can be found and used."]})]})}function m(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},2295:(e,n,a)=>{a.d(n,{A:()=>o});const o='schema: apigear.module/1.0\nname: io.world\nversion: "1.0.0"\n\ninterfaces:\n  - name: Hello\n    properties:\n      - { name: last, type: Message }\n    operations:\n      - name: say\n        params:\n          - { name: msg, type: Message }\n          - { name: when, type: When }\n        return:\n          type: int\n    signals:\n      - name: justSaid\n        params:\n          - { name: msg, type: Message }\nenums:\n  - name: When\n    members:\n      - { name: Now, value: 0 }\n      - { name: Soon, value: 1 }\n      - { name: Never, value: 2 }\nstructs:\n  - name: Message\n    fields:\n      - { name: content, type: string }\n'}}]);