"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[1787],{28453:(n,e,t)=>{t.d(e,{R:()=>r,x:()=>c});var i=t(96540);const o={},a=i.createContext(o);function r(n){const e=i.useContext(a);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function c(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(o):n.components||o:r(n.components),i.createElement(a.Provider,{value:e},n.children)}},76114:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>s,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"advanced/stimulation/intro","title":"API Stimulation","description":"The stimulation is experimental and may not work yet fully","source":"@site/docs/advanced/stimulation/intro.md","sourceDirName":"advanced/stimulation","slug":"/advanced/stimulation/intro","permalink":"/docs/advanced/stimulation/intro","draft":false,"unlisted":false,"editUrl":"https://github.com/apigear-io/apigear-docs/edit/main/docs/advanced/stimulation/intro.md","tags":[],"version":"current","lastUpdatedAt":1753189120000,"frontMatter":{},"sidebar":"docsSidebar","previous":{"title":"Monitoring Protocol","permalink":"/docs/advanced/monitor/protocol"},"next":{"title":"Protocol Mappings","permalink":"/docs/advanced/protocols/mapping"}}');var o=t(74848),a=t(28453);const r={},c="API Stimulation",s={},l=[{value:"Why?",id:"why",level:2},{value:"Stimulation file?",id:"stimulation-file",level:2},{value:"Running the stimulation",id:"running-the-stimulation",level:2}];function u(n){const e={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...n.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(e.header,{children:(0,o.jsx)(e.h1,{id:"api-stimulation",children:"API Stimulation"})}),"\n",(0,o.jsx)(e.admonition,{title:"Experimental",type:"warning",children:(0,o.jsxs)(e.p,{children:["The ",(0,o.jsx)(e.strong,{children:"stimulation"})," is experimental and may not work yet fully"]})}),"\n",(0,o.jsx)(e.h2,{id:"why",children:"Why?"}),"\n",(0,o.jsx)(e.p,{children:"Stimulation allows to trigger sequences of operations or data changes on a service. This is useful to test the behavior of a service or to simulate a user interaction."}),"\n",(0,o.jsx)(e.mermaid,{value:"graph LR\n  Stimulation -. objectlink .-> Service"}),"\n",(0,o.jsx)(e.h2,{id:"stimulation-file",children:"Stimulation file?"}),"\n",(0,o.jsx)(e.p,{children:"A stimulation file is a JavaScript file which contains a stimulation scenario. The stimulation comes in the form of a client which can be used to trigger sequences of operations or data changes on a service."}),"\n",(0,o.jsx)(e.p,{children:"Base on this API example we can create a client which can be used to trigger sequences of operations or data changes on a service."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:"module demo\n\ninterface Counter {\n  count: int\n  increment()\n  decrement()\n}\n"})}),"\n",(0,o.jsx)(e.p,{children:"The counter example shows a simple interface which can be used to increment or decrement a reactive counter. The stimulation file will look like this:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{className:"language-javascript",children:'// counter_client.js\n\nconst url = "ws://localhost:5555/ws"\nconst channel = $createChannel(url)\n\n// create a client based on module and interface name\nconst counter = channel.createClient("demo.Counter");\n\n// Monitor property changes\ncounter.onProperty("count", function(value) {\n  console.log("Count changed to:", value);\n});\n\n// Listen for signals if any\ncounter.onSignal("countReached", function(target) {\n  console.log("Count reached:", target);\n});\n\nfunction main() { // main is auto run on script execution\n  // Connect to the remote service\n  channel.connect();\n  \n  // Trigger operations\n  for (let i = 0; i < 10; i++) {\n    counter.callMethod("increment");\n    counter.callMethod("decrement");\n  }\n  \n  // Get current property value\n  const currentCount = counter.getProperty("count");\n  console.log("Final count:", currentCount);\n  \n  // Optionally disconnect when done\n  setTimeout(function() {\n    channel.disconnect();\n    $quit();\n  }, 1000);\n}\n'})}),"\n",(0,o.jsx)(e.p,{children:"To run the stimulation file we need to start a remote service"}),"\n",(0,o.jsx)(e.h2,{id:"running-the-stimulation",children:"Running the stimulation"}),"\n",(0,o.jsx)(e.p,{children:"We will use a simulation file to simulate a service."}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"apigear sim run counter_service.js\n"})}),"\n",(0,o.jsx)(e.p,{children:"This will run the simulation and provide the simulation interface to the client."}),"\n",(0,o.jsx)(e.p,{children:"Now we can run the stimulation file:"}),"\n",(0,o.jsx)(e.pre,{children:(0,o.jsx)(e.code,{children:"// run simulation client but don't create a server\napigear sim run counter_client.js --no-serve\n"})}),"\n",(0,o.jsx)(e.p,{children:"This will run the stimulation file and trigger the operations on the simulation interface."})]})}function d(n={}){const{wrapper:e}={...(0,a.R)(),...n.components};return e?(0,o.jsx)(e,{...n,children:(0,o.jsx)(u,{...n})}):u(n)}}}]);