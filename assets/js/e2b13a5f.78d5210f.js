"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[9216],{16618:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"objectapi/idl","title":"ObjectAPI IDL","description":"The ObjectAPI IDL can be used in parallel to the ObjectAPI JSON Schema. In fact the IDL is transformed to the JSON schema and then processed by the same tools.","source":"@site/docs/objectapi/idl.md","sourceDirName":"objectapi","slug":"/objectapi/idl","permalink":"/docs/objectapi/idl","draft":false,"unlisted":false,"editUrl":"https://github.com/apigear-io/apigear-docs/edit/main/docs/objectapi/idl.md","tags":[],"version":"current","lastUpdatedAt":1727808477000,"sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"docsSidebar","previous":{"title":"API Examples","permalink":"/docs/objectapi/examples"},"next":{"title":"Advanced Guides","permalink":"/docs/category/advanced-guides"}}');var a=t(74848),o=t(28453);const s={sidebar_position:6},r="ObjectAPI IDL",c={},l=[{value:"Interfaces",id:"interfaces",level:2},{value:"Structures",id:"structures",level:2},{value:"Enumerations",id:"enumerations",level:2},{value:"Example",id:"example",level:2}];function d(e){const n={admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"objectapi-idl",children:"ObjectAPI IDL"})}),"\n",(0,a.jsx)(n.p,{children:"The ObjectAPI IDL can be used in parallel to the ObjectAPI JSON Schema. In fact the IDL is transformed to the JSON schema and then processed by the same tools."}),"\n",(0,a.jsx)(n.p,{children:"Vice versa the JSON schema can be transformed to the IDL."}),"\n",(0,a.jsx)(n.p,{children:"The IDL does more look like an actual developer language. It is more verbose and more powerful. It allows to define more complex types and to define more complex APIs."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"module demo 1.0\n\n// Counter is a simple counter object\ninterface Counter {\n    // count is the current counter value\n    count: int\n    // increment the count property by step\n    increment(int step)\n    // decrement the count property by step\n    decrement(int step)\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"interfaces",children:"Interfaces"}),"\n",(0,a.jsx)(n.p,{children:"An interface defines a set of properties, operations and signals."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"interface name {\n    `prop-name` : type                     // property\n    `method-name` ( params ): `type`       // operation\n    signal `signal-name` ( params )        // signal\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"A type can be either a primitive type or a complex type. A complex type can be a structure, enumeration or another interface."}),"\n",(0,a.jsx)(n.p,{children:"A primitive type can be one of the following:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"bool"})," : boolean value"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"int"}),", ",(0,a.jsx)(n.code,{children:"int32"}),", ",(0,a.jsx)(n.code,{children:"int64"})," : integer value"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"float"}),", ",(0,a.jsx)(n.code,{children:"float32"}),", ",(0,a.jsx)(n.code,{children:"float64"})," : floating point value"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"string"})," : string value"]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"A complex type can be one of the following:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"name of an interface"}),"\n",(0,a.jsx)(n.li,{children:"name of an enumeration"}),"\n",(0,a.jsx)(n.li,{children:"name of a structure"}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["To define arrays of a type just append the ",(0,a.jsx)(n.code,{children:"[]"})," to the type."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"struct Struct1 {}\n\ninterface Demo {\n    propString: string\n    propStringArray: string[]\n    propStruct: Struct1\n}\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsx)(n.p,{children:"Currently we do not support importing other modules. This is planned for a future version."})}),"\n",(0,a.jsx)(n.h2,{id:"structures",children:"Structures"}),"\n",(0,a.jsx)(n.p,{children:"A data structure is a message which can be used to send complex information between objects. A structure is defined as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"struct name {\n    fieldName : type\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"enumerations",children:"Enumerations"}),"\n",(0,a.jsx)(n.p,{children:"An enumeration is a set of named values. An enumeration is defined as follows:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"enum Enum1 {\n    Value1 = 0\n    Value2 = 1\n    Value3 = 2\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["A value can also be a hex number in the format of ",(0,a.jsx)(n.code,{children:"0x2"}),". If there is no value specified the next value is used."]}),"\n",(0,a.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,a.jsx)(n.p,{children:"Here is a complete example:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-go",children:"module demo 1.0\n\ninterface Radio {\n    // frequency is the current frequency in MHz\n    frequency: float\n    // stations is a list of stations\n    stations: Station[]\n    // if enabled automatically tunes to the next station\n    autoTune: bool\n    // scan for stations\n    scan()\n    // tune to a specific frequency\n    tuneFrequency(float frequency)\n    // tune to a specific station\n    tuneStation(stationId: int)\n    // signal emitted when a new station is found\n    signal stationFound(stationId: int)\n}\n\nstruct Station {\n    // id is the station id\n    id: int\n    // name of the station\n    name: string\n    // short name of the station\n    shortName: string\n    // frequency in MHz\n    frequency: float\n    // artwork url\n    artwork: string\n    // category of the content\n    category: Category\n}\n\nenum Category {\n    News = 0\n    Music = 1\n    Talk = 2\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"Our ApiGear tooling can create code in different languages. For example in C++ this would look like (simplified):"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",children:"class Radio {\npublic:\n    // scan for stations\n    void scan();\n    // tune to a specific frequency\n    void tuneFrequency(float frequency);\n    // tune to a specific station\n    void tuneStation(int stationId);\n    // signal emitted when a new station is found\n    void onStationFound(function<void(int stationId)> callback);\npublic:\n    // frequency is the current frequency in MHz\n    float frequency;\n    // stations is a list of stations\n    std::vector<Station> stations;\n    // if enabled automatically tunes to the next station\n    bool autoTune;\n};\n\nstruct Station {\n    // id is the station id\n    int id;\n    // name of the station\n    std::string name;\n    // short name of the station\n    std::string shortName;\n    // frequency in MHz\n    float frequency;\n    // artwork url\n    std::string artwork;\n    // category of the content\n    Category category;\n};\n"})})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>r});var i=t(96540);const a={},o=i.createContext(a);function s(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:s(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);