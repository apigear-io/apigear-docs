"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[6163],{9776:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>h,contentTitle:()=>o,default:()=>p,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var i=s(4848),r=s(8453),t=s(1432),a=s(2295);const l={sidebar_position:1},o="API Feature",c={id:"features/api",title:"API Feature",description:"The feature api is the bare minimum for code generation. The feature will generate:",source:"@site/template-docs/template-cpp14/docs/docs/features/api.md",sourceDirName:"features",slug:"/features/api",permalink:"/template-cpp14/docs/features/api",draft:!1,unlisted:!1,editUrl:"https://github.com/apigear-io/template-cpp14/edit/main/docs/docs/features/api.md",tags:[],version:"current",lastUpdatedAt:1712845509e3,sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"defaultSidebar",previous:{title:"Features",permalink:"/template-cpp14/docs/features/"},next:{title:"Stubs",permalink:"/template-cpp14/docs/features/stubs"}},h={},d=[{value:"Files overview per module",id:"files-overview-per-module",level:3},{value:"Enums and Structures",id:"enums-and-structures",level:3},{value:"Enums",id:"enums",level:4},{value:"Structs",id:"structs",level:4},{value:"Interfaces",id:"interfaces",level:3},{value:"Publisher",id:"publisher",level:4},{value:"Subscriber",id:"subscriber",level:4},{value:"Other",id:"other",level:3}];function u(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"api-feature",children:"API Feature"})}),"\n",(0,i.jsxs)(n.p,{children:["The feature ",(0,i.jsx)(n.code,{children:"api"})," is the bare minimum for code generation. The feature will generate:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["core behavioral API for the defined ",(0,i.jsx)(n.em,{children:"interfaces"})]}),"\n",(0,i.jsxs)(n.li,{children:["interfaces for ",(0,i.jsx)(n.a,{href:"api#publisher",children:"publisher"})," and ",(0,i.jsx)(n.a,{href:"api#subscriber",children:"subscriber"})," tailored for each interface"]}),"\n",(0,i.jsxs)(n.li,{children:["Enumerations for the defined ",(0,i.jsx)(n.em,{children:"enums"})]}),"\n",(0,i.jsxs)(n.li,{children:["Data structured with a core implementation for the defined ",(0,i.jsx)(n.em,{children:"structs"})]}),"\n"]}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["Check out the ",(0,i.jsx)(n.a,{href:"/template-cpp14/docs/features/stubs",children:"stubs"})," feature which provides fully functional implementation for the publisher."]})}),"\n",(0,i.jsx)(n.h3,{id:"files-overview-per-module",children:"Files overview per module"}),"\n",(0,i.jsx)(n.p,{children:"Using the example API definition"}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"Hello World API (click to expand)"}),(0,i.jsx)(t.A,{language:"yaml",showLineNumbers:!0,children:a.A})]}),"\n",(0,i.jsx)(n.p,{children:"the following file structure will be generated inside the target folder. The purpose and content of each file is explained below."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"\ud83d\udcc2hello-world\n \u2523 \ud83d\udcc2apigear\n \u2523 \ud83d\udcc2cpp_hello_world\n \u2503 \u2523 \ud83d\udcc2apigear\n \u2503 \u2523 \ud83d\udcc2examples\n \u2503 \u2523 \ud83d\udcc2modules\n \u2503 \u2503 \u2517 \ud83d\udcc2io_world\n \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2generated\n \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcc2api\n \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcCMakeLists.txt\n \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdccommon.h\n \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcdatastructs.api.cpp\n \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdcdatastructs.api.h\n \u2503 \u2503 \u2503 \u2503 \u2503 \u2523 \ud83d\udcdchello.api.h\n \u2503 \u2503 \u2503 \u2503 \u2503 \u2517 \ud83d\udcdcio_world.h\n .. .\n"})}),"\n",(0,i.jsx)(n.h3,{id:"enums-and-structures",children:"Enums and Structures"}),"\n",(0,i.jsxs)(n.p,{children:["Files ",(0,i.jsx)(n.code,{children:"datastructs.api.h"})," and ",(0,i.jsx)(n.code,{children:"datastructs.api.cpp"})," contain core data structures and enumerations used in your module."]}),"\n",(0,i.jsx)(n.h4,{id:"enums",children:"Enums"}),"\n",(0,i.jsxs)(n.p,{children:["Inside the ",(0,i.jsx)(n.code,{children:"datastructs.api.h"})," you will find all the enums defined in your API. For each enum there is a ",(0,i.jsx)(n.code,{children:"enum class"})," generated with all the values defined."]}),"\n",(0,i.jsxs)(n.p,{children:["For convenience of use each enum has a ",(0,i.jsx)(n.code,{children:"toEnum"})," function, which converts given ",(0,i.jsx)(n.code,{children:"uint8_t"})," to enum value."]}),"\n",(0,i.jsx)(n.h4,{id:"structs",children:"Structs"}),"\n",(0,i.jsxs)(n.p,{children:["All structs defined in your API are generated in ",(0,i.jsx)(n.code,{children:"datastructs.api.h"})," and ",(0,i.jsx)(n.code,{children:"datastructs.api.cpp"})," files. They are used to communicate data between your API and its users."]}),"\n",(0,i.jsx)(n.p,{children:"For convenience of use each structure has:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"equality comparison operators"}),"\n",(0,i.jsx)(n.li,{children:"empty constructor and a constructor with parameters for all its fields."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"interfaces",children:"Interfaces"}),"\n",(0,i.jsxs)(n.p,{children:["For each interface inside an AP module there is separate file generated, like the ",(0,i.jsx)(n.code,{children:"\ud83d\udcdchello.api.h"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"The interface class contains pure virtual functions as well as pure virtual subscriber and publisher classes."}),"\n",(0,i.jsx)(n.p,{children:"The interface has:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["pure virtual ",(0,i.jsx)(n.code,{children:"getters"})," and a ",(0,i.jsx)(n.code,{children:"setters"})," for each property"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"virtual void setLast(const Message& last) = 0;\nvirtual const Message& getLast() const = 0;\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"pure virtual functions for each operation"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"virtual int say(const Message& msg, When::WhenEnum when) = 0;\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"and their asynchronous versions"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"virtual std::future<int> sayAsync(const Message& msg, WhenEnum when) = 0;\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"an access to a publisher"}),"\n",(0,i.jsx)(n.p,{children:"The interface does not contain signals defined in your interface, the signals feature is achieved with a subscriber/publisher mechanism."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["A class interested in notification on signal emission (and property changes) needs to use the publisher to subscribe for those events.\nThe important thing is that your implementation of the interface should notify the ",(0,i.jsx)(n.code,{children:"IHelloPublisher"})," about emitted signals or state changed."]}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["Notice the convention for the getter - we use an underscore ",(0,i.jsx)(n.code,{children:"_"})," - this function is added by the generator to your interface. The underscore is used to prevent name collision with your implementation of the interface."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"virtual IHelloPublisher& _getPublisher() const = 0;\n"})})]}),"\n",(0,i.jsx)(n.h4,{id:"publisher",children:"Publisher"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"IHelloPublisher"})," provides the interface for subscribing and unsubscribing from a signal emission\nor a property change. Use of such a class is mandatory for implementation and allows users of your API to react on changes."]}),"\n",(0,i.jsxs)(n.p,{children:["The publisher is responsible for keeping its clients informed about requested changes. But it is the interface (here ",(0,i.jsx)(n.code,{children:"IHello"}),") implementation responsibility\nto call the publish functions from its API when signal or property change occurs e.g:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",metastring:"IHello implementation",children:"void Hello::setLast(const Message& last)\n{\n    ...\n    // call the publish function\n    m_publisher->publishLastChanged(last);\n\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"There are two ways of subscribing for changes."}),"\n",(0,i.jsxs)(n.p,{children:["Either provide an implementation for ",(0,i.jsx)(n.code,{children:"ISubscriber"})," interface class and use is with those publisher's functions"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"void subscribeToAllChanges(IHelloSubscriber& subscriber);\nvoid unsubscribeFromAllChanges(IHelloSubscriber& subscriber);\n"})}),"\n",(0,i.jsx)(n.p,{children:"The subscribe ISubscriber assures your subscriber will be informed about all emitted signals and all property changes."}),"\n",(0,i.jsxs)(n.p,{children:["The other option is to use the ",(0,i.jsx)(n.em,{children:"parallel"})," system of notification which doesn't require the ",(0,i.jsx)(n.code,{children:"ISubscriber"})," and informs your Interface user about change of specific property or signal emission. E.g for ",(0,i.jsx)(n.code,{children:"LastChanged"})," property we have:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"long subscribeToLastChanged(HelloLastPropertyCb callback); // returns handleId that needs to be used to unsubscribe\nvoid unsubscribeFromLastChanged(long handleId);\n"})}),"\n",(0,i.jsx)(n.p,{children:"The publisher will execute the provided callback function each time and only when this property is changed."}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsx)(n.p,{children:"For both methods of subscribing make sure to remove subscription for a ISubscriber/callback before it becomes invalid.\nAlso make sure that the subscribed function is not blocking and returns immediately!"})}),"\n",(0,i.jsxs)(n.p,{children:["The publish functions need to be called by the implementation of the ",(0,i.jsx)(n.code,{children:"IHello"})," on each property change or signal emission to notify all the subscribers about this change."]}),"\n",(0,i.jsxs)(n.admonition,{type:"note",children:[(0,i.jsxs)(n.p,{children:["Subscriptions systems are parallel - if you use both of them for single interface user i.e subscribe your class as an ",(0,i.jsx)(n.code,{children:"ISubscriber"})," and for a single change\nyour subscriber will be informed twice about that change, one for each subscription mechanism."]}),(0,i.jsxs)(n.p,{children:["This means that the unsubscribe functions for both mechanisms work only for that mechanism, i.e. the unsubscribe with ",(0,i.jsx)(n.code,{children:"ISubscriber"})," will not remove any subscriptions for the specific property/signal and they stay intact."]})]}),"\n",(0,i.jsx)(n.h4,{id:"subscriber",children:"Subscriber"}),"\n",(0,i.jsxs)(n.p,{children:["For each interface we generate the ",(0,i.jsx)(n.code,{children:"ISubscriber"}),", for example here the ",(0,i.jsx)(n.code,{children:"IHelloSubscriber"})," which contains a set of functions for all the properties and signals for the notification mechanism."]}),"\n",(0,i.jsxs)(n.p,{children:["The implementation for ",(0,i.jsx)(n.code,{children:"IHello"})," contains a publisher which can be used to subscribe for those changes called ",(0,i.jsx)(n.code,{children:"IHelloSubscriber"}),". Each time publisher will receive publish request it will notify all subscribed ",(0,i.jsx)(n.code,{children:"IHelloSubscriber"})," object about change.\nYou can use ",(0,i.jsx)(n.code,{children:"IHelloSubscriber"})," class to implement your local clients of the ",(0,i.jsx)(n.code,{children:"IHello"})," or a network service adapter - see ",(0,i.jsx)(n.a,{href:"/template-cpp14/docs/features/olink#olink-server-adapter",children:"Olink Server"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Below is a small code snippet which shows an example implementation for ",(0,i.jsx)(n.code,{children:"IHelloSubscriber"}),", a class which main functionality is reacting on changes in ",(0,i.jsx)(n.code,{children:"Hello"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",children:"class HelloUser : public IHelloSubscriber\n{\npublic:\n    HelloUser(IHello& Hello)\n    : m_Hello(Hello)\n    {\n        m_Hello._getPublisher().subscribeToAllChanges(*this);\n    }\n     ~HelloUser()\n     {\n          m_Hello._getPublisher().unsubscribeFromAllChanges(*this);\n     }\n\n    void onJustSaid(const Message& /*msg*/) override\n    {\n        // do something with msg.\n    }\n\n    void onLastChanged(const Message& /*last*/) override\n    {\n        // do something with last;\n    }\n    // Some other functionality.\nprivate:\n    IHello& m_Hello\n}\n\n"})}),"\n",(0,i.jsx)(n.h3,{id:"other",children:"Other"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"\ud83d\udcdc CMakeLists.txt"})," for building this module, describing it's dependencies, and exposing built package for other features that will use it. ",(0,i.jsx)("br",{}),"\n",(0,i.jsx)(n.code,{children:"\ud83d\udcdc common.h"})," prepares dll import/export statements."]})]})}function p(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},2295:(e,n,s)=>{s.d(n,{A:()=>i});const i='schema: apigear.module/1.0\nname: io.world\nversion: "1.0.0"\n\ninterfaces:\n  - name: Hello\n    properties:\n      - { name: last, type: Message }\n    operations:\n      - name: say\n        params:\n          - { name: msg, type: Message }\n          - { name: when, type: When }\n        return:\n          type: int\n    signals:\n      - name: justSaid\n        params:\n          - { name: msg, type: Message }\nenums:\n  - name: When\n    members:\n      - { name: Now, value: 0 }\n      - { name: Soon, value: 1 }\n      - { name: Never, value: 2 }\nstructs:\n  - name: Message\n    fields:\n      - { name: content, type: string }\n'}}]);