"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[9158],{28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>c});var a=t(96540);const i={},o=a.createContext(i);function r(e){const n=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),a.createElement(o.Provider,{value:n},e.children)}},68284:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>c,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"objectapi/advanced","title":"Advanced Concepts","description":"Advanced ObjectAPI concepts.","source":"@site/docs/objectapi/advanced.md","sourceDirName":"objectapi","slug":"/objectapi/advanced","permalink":"/docs/objectapi/advanced","draft":false,"unlisted":false,"editUrl":"https://github.com/apigear-io/apigear-docs/edit/main/docs/objectapi/advanced.md","tags":[],"version":"current","lastUpdatedAt":1727808477000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"docsSidebar","previous":{"title":"API Modules","permalink":"/docs/objectapi/modules"},"next":{"title":"API Examples","permalink":"/docs/objectapi/examples"}}');var i=t(74848),o=t(28453);const r={sidebar_position:4},c="Advanced Concepts",s={},d=[{value:"Document information",id:"document-information",level:2},{value:"Meta information",id:"meta-information",level:2},{value:"Compact Writing",id:"compact-writing",level:2}];function l(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"advanced-concepts",children:"Advanced Concepts"})}),"\n",(0,i.jsx)(n.p,{children:"Advanced ObjectAPI concepts."}),"\n",(0,i.jsx)(n.h2,{id:"document-information",children:"Document information"}),"\n",(0,i.jsx)(n.p,{children:"The info section allows user to add information related to the current document."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"info:\n  license: <license-identifier>\n"})}),"\n",(0,i.jsx)(n.h2,{id:"meta-information",children:"Meta information"}),"\n",(0,i.jsx)(n.p,{children:"Sometimes it is required to add additional information, which is not part of the ObjectAPI specification. For this the meta tag can be used."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"interfaces:\n  - name: Tuner\n    meta:\n      singleton: true\n      config: { port: 1024 }\n"})}),"\n",(0,i.jsx)(n.p,{children:"As the information is not part of the specification the applied code generator must have an understanding of the data. For example a C++ code generator could create a singleton type from the interface declaration."}),"\n",(0,i.jsx)(n.h2,{id:"compact-writing",children:"Compact Writing"}),"\n",(0,i.jsx)(n.p,{children:"YAML allows a compact format for single line information. This allows us to shorten API definitions considerable. For example this API"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"structs:\n  - name: Error\n    fields:\n      - name: message,\n        type: string\n      - name: code\n        type: int\n"})}),"\n",(0,i.jsx)(n.p,{children:"Can be written in a short format like this:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"structs:\n  - name: Error\n    fields:\n      - { name: message, type: string }\n      - { name: code, type: int }\n"})})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);