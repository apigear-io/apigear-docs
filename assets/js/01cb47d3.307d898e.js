"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[8789],{34296:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"advanced/simulation/scenario","title":"Simulation Szenarios","description":"A szenario captures the data and behavior of interfaces (aka services). It is used to simulate the behavior of a service. A szenario is a JavaScript file which contains a simulation scenario. The scenario creates all API endpoints using an actor. The initial simulation can be auto generated by the template system and then extended by the developer or simply written by hand.","source":"@site/docs/advanced/simulation/scenario.md","sourceDirName":"advanced/simulation","slug":"/advanced/simulation/scenario","permalink":"/docs/advanced/simulation/scenario","draft":false,"unlisted":false,"editUrl":"https://github.com/apigear-io/apigear-docs/edit/main/docs/advanced/simulation/scenario.md","tags":[],"version":"current","lastUpdatedAt":1750096349000,"sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docsSidebar","previous":{"title":"Service Simulation","permalink":"/docs/advanced/simulation/intro"},"next":{"title":"JavaScript API","permalink":"/docs/advanced/simulation/api"}}');var a=i(74848),r=i(28453);const o={sidebar_position:2},s="Simulation Szenarios",c={},l=[{value:"API Definition",id:"api-definition",level:2},{value:"Simulation file",id:"simulation-file",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",mermaid:"mermaid",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"simulation-szenarios",children:"Simulation Szenarios"})}),"\n",(0,a.jsx)(n.p,{children:"A szenario captures the data and behavior of interfaces (aka services). It is used to simulate the behavior of a service. A szenario is a JavaScript file which contains a simulation scenario. The scenario creates all API endpoints using an actor. The initial simulation can be auto generated by the template system and then extended by the developer or simply written by hand."}),"\n",(0,a.jsx)(n.mermaid,{value:"graph LR\n  User --\x3e|serve| SimulationServer\n  User --\x3e|run| LoadSimulation\n  LoadSimulation --\x3e|run script| SimulationServer"}),"\n",(0,a.jsxs)(n.p,{children:["A szenerio is loaded and executed into the simulation server. For this the simulation server has to be started before using (",(0,a.jsx)(n.code,{children:"apigear serve"}),") or run with the simulation file (",(0,a.jsx)(n.code,{children:"apigear sim run <file> --serve"}),"). In case the simulation server is already running the simulation file can be loaded using the ",(0,a.jsx)(n.code,{children:"apigear sim run <file>"})," command."]}),"\n",(0,a.jsx)(n.h2,{id:"api-definition",children:"API Definition"}),"\n",(0,a.jsx)(n.p,{children:"Here is a simple API definition and the corresponding simulation scenario:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:"module demo\n\ninterface Counter {\n  count: int\n  increment()\n  decrement()\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"The counter example shows a simple interface which can be used to increment or decrement a reactive counter."}),"\n",(0,a.jsx)(n.h2,{id:"simulation-file",children:"Simulation file"}),"\n",(0,a.jsx)(n.p,{children:"The simulation file will look like this:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-js",children:'// counter.sim.js\n\n// create a service based on module and interface name and provide initial properties\nconst counter = $createService("demo.Counter", { count: 0 });\n\n// react to changes of the count property\ncounter.$.onProperty("count", function(value) {\n  console.log("count changed to " + value);\n});\n\ncounter.increment = function() {\n  counter.count++;\n};\n\ncounter.decrement = function() {\n  counter.count--;\n};\n\n// a main function which will be called when the simulation is started\nfunction main() {\n  for (let i = 0; i < 10; i++) {\n    counter.increment();\n    counter.decrement();\n  }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"You run the simulation by starting the server and then run the simulation file. The server will then start the simulation and provide the simulation interface to the client."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-sh",children:"# run a smimulation and start the server\n$ apigear sim run counter.sim.js\n"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>s});var t=i(96540);const a={},r=t.createContext(a);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);