"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[8775],{16239:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"objectapi/examples","title":"API Examples","description":"Counter","source":"@site/docs/objectapi/examples.md","sourceDirName":"objectapi","slug":"/objectapi/examples","permalink":"/docs/objectapi/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/apigear-io/apigear-docs/edit/main/docs/objectapi/examples.md","tags":[],"version":"current","lastUpdatedAt":1727808477000,"sidebarPosition":5,"frontMatter":{"sidebar_position":5},"sidebar":"docsSidebar","previous":{"title":"Advanced Concepts","permalink":"/docs/objectapi/advanced"},"next":{"title":"ObjectAPI IDL","permalink":"/docs/objectapi/idl"}}');var r=t(74848),i=t(28453);const o={sidebar_position:5},s="API Examples",c={},d=[{value:"Counter",id:"counter",level:2},{value:"Radio Tuner",id:"radio-tuner",level:2},{value:"Weather Station",id:"weather-station",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"api-examples",children:"API Examples"})}),"\n",(0,r.jsx)(n.h2,{id:"counter",children:"Counter"}),"\n",(0,r.jsx)(n.p,{children:"The typical counter example to increment and decrement a count value."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yml",children:'schema: apigear.module/1.0\nname: org.example\nversion: "1.0"\ninfo:\n  title: "Counter API"\n  description: A counter module develope\n\ninterfaces:\n  - name: Counter\n    description: Counter interface to count up and down\n    properties:\n      - name: count\n        type: int\n    operations:\n      - name: increment\n      - name: decrement\n'})}),"\n",(0,r.jsx)(n.h2,{id:"radio-tuner",children:"Radio Tuner"}),"\n",(0,r.jsx)(n.p,{children:"A radio tuner with a current station and a station list. It can operate on different wavebands."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"schema: apigear.module/1.0\nmodule: entertainment.tuner\nversion: 1.0\n\ninterfaces:\n  - name: Tuner\n    description: A tuner service to manages tuner stations\n    properties:\n      - name: currentStation\n        type: Station\n        description: current selected station\n      - name: stationList\n        type: Station[]\n        description: list of current available stations\n    operations:\n      - name: nextStation\n        description: sets current station to next station from list\n      - name: previousStation\n        description: sets current station to previous station from list\n      - name: updateCurrentStation\n        description: update current station\n        params:\n          - name: stationId\n          - type: id\n\nstructs:\n  - name: Station\n    fields:\n      - name: stationId\n        type: id\n        description: station id\n      - name: name\n        type: string\n        description: station name\n      - name: modified\n        type: string\n        format: date-time\n        description: station last time modified\n\nenums:\n  - name: State\n    description: State for tuner interface\n    members:\n      - name: None\n        description: tuner not initialized\n      - name: Loading\n        description: tuner is loading\n      - name: Ready\n        description: tuner is ready and operational\n      - name: Error\n        description: tuner received an error\n  - name: Waveband\n    members:\n      - name: FM\n        description: FM waveband\n      - name: AM\n        description: AM waveband\n"})}),"\n",(0,r.jsx)(n.h2,{id:"weather-station",children:"Weather Station"}),"\n",(0,r.jsx)(n.p,{children:"The weather station uses a more compact YAML format to display the current temperature."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"schema: apigear.module/1.0\nmodule: sensors.weatherstation\nversion: 2.5\n\ninterfaces:\n  - name: WeatherStation\n  - properties:\n      - { name: temperature, type: float }\n      - { name: lastError, type: Error }\n  - operations:\n      - { name: reset }\n  - signals:\n      - name: error\n        params:\n          - { name: error, type: Error }\n\nstructs:\n  - name: Error\n    fields:\n      - name: msg\n        type: string\n"})})]})}function m(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>s});var a=t(96540);const r={},i=a.createContext(r);function o(e){const n=a.useContext(i);return a.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);