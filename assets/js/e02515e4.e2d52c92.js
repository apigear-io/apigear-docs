"use strict";(self.webpackChunkapigear=self.webpackChunkapigear||[]).push([[2],{3841:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var i=n(4848),l=n(8453);const a={sidebar_position:2},s="Quick-Start",o={id:"quickstart/index",title:"Quick-Start",description:"The Quick-Start guide explains how to, in few steps, get from an API to a functional Qt plugin.",source:"@site/template-docs/template-qt6/docs/docs/quickstart/index.md",sourceDirName:"quickstart",slug:"/quickstart/",permalink:"/template-qt6/docs/quickstart/",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Template Qt6",permalink:"/template-qt6/docs/intro"},next:{title:"Features",permalink:"/template-qt6/docs/features/"}},r={},d=[{value:"1. Install the code generator",id:"1-install-the-code-generator",level:2},{value:"2. Get the template",id:"2-get-the-template",level:2},{value:"Installation via CLI",id:"installation-via-cli",level:3},{value:"Installation via Studio",id:"installation-via-studio",level:3},{value:"Clone from github",id:"clone-from-github",level:3},{value:"3. Set up project",id:"3-set-up-project",level:2},{value:"Solution file",id:"solution-file",level:3},{value:"API module file",id:"api-module-file",level:3},{value:"4. Generate code",id:"4-generate-code",level:2},{value:"Generate via CLI",id:"generate-via-cli",level:3},{value:"Generate via Studio",id:"generate-via-studio",level:3},{value:"5. Use the generated Qt project.",id:"5-use-the-generated-qt-project",level:2},{value:"Create and run an example",id:"create-and-run-an-example",level:3}];function c(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"quick-start",children:"Quick-Start"})}),"\n",(0,i.jsxs)(t.p,{children:["The Quick-Start guide explains how to, in few steps, get from an API to a functional ",(0,i.jsx)(t.em,{children:"Qt"})," plugin.\nSteps 1 and 3 are universal for other technologies. In the step 2 you will choose a concrete ",(0,i.jsx)(t.em,{children:"Qt"})," template.\nFor more general information about first steps with ApiGear ",(0,i.jsx)(t.a,{href:"/docs/start/first_steps",children:"First Steps"})]}),"\n",(0,i.jsxs)(t.p,{children:["The quick start enables only basic features: the ",(0,i.jsx)(t.a,{href:"/template-qt6/docs/features/api",children:"api"})," generation and simple ",(0,i.jsx)(t.a,{href:"/template-qt6/docs/features/stubs",children:"stub"})," implementation.\nFor all available features check the ",(0,i.jsx)(t.a,{href:"/template-qt6/docs/features/",children:"overview"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"1-install-the-code-generator",children:"1. Install the code generator"}),"\n",(0,i.jsxs)(t.p,{children:["Get the ",(0,i.jsx)(t.a,{href:"https://github.com/apigear-io/studio/releases",children:"ApiGear Studio"})," or ",(0,i.jsx)(t.a,{href:"https://github.com/apigear-io/cli/releases",children:"ApiGear CLI"}),". For more information check the ",(0,i.jsx)(t.a,{href:"/docs/start/install",children:"ApiGear documentation"}),"."]}),"\n",(0,i.jsx)(t.h2,{id:"2-get-the-template",children:"2. Get the template"}),"\n",(0,i.jsxs)(t.p,{children:["There are several options to get the template. Installation via the ",(0,i.jsx)(t.em,{children:"Studio"})," or the ",(0,i.jsx)(t.em,{children:"CLI"}),". Alternatively it is possible to clone or download from github."]}),"\n",(0,i.jsx)(t.h3,{id:"installation-via-cli",children:"Installation via CLI"}),"\n",(0,i.jsxs)(t.p,{children:["When using the ",(0,i.jsx)(t.em,{children:"CLI"})," only the highlighted line is imported. You can always check whether the installation was successful via the ",(0,i.jsx)(t.code,{children:"template list"})," command."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"$ apigear template list\nlist of templates from registry and cache\nname                       | installed | registry | url\napigear-io/template-qtcpp | false     | true     | https://github.com/apigear-io/template-qtcpp.git\n...\n# highlight-next-line\n$ apigear template install apigear-io/template-qtcpp\n$ apigear template list\nlist of templates from registry and cache\nname                       | installed | registry | url\napigear-io/template-qtcpp | true      | true     | https://github.com/apigear-io/template-qtcpp.git\n...\n"})}),"\n",(0,i.jsx)(t.h3,{id:"installation-via-studio",children:"Installation via Studio"}),"\n",(0,i.jsx)(t.p,{children:"From within the studio the installation is really simple."}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Open an existing project or create an new one"}),"\n",(0,i.jsxs)(t.li,{children:["Go to the ",(0,i.jsx)(t.code,{children:"Templates"})," tab"]}),"\n",(0,i.jsxs)(t.li,{children:["Click ",(0,i.jsx)(t.code,{children:"Install"})," on the ",(0,i.jsx)(t.code,{children:"apigear-io/template-qtcpp"})," entry"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"clone-from-github",children:"Clone from github"}),"\n",(0,i.jsx)(t.p,{children:"In case you want to check or modify the source code of the template, it is easier to clone or download the repository. The repository does not need to be part of the project, but can be stored anywhere on the computer."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"$ git clone https://github.com/apigear-io/template-qtcpp.git\n"})}),"\n",(0,i.jsx)(t.h2,{id:"3-set-up-project",children:"3. Set up project"}),"\n",(0,i.jsxs)(t.p,{children:["For a project we usually need two files. The solution which specifies what ",(0,i.jsx)(t.code,{children:"APIs"})," and which template to use for it. And at least one ",(0,i.jsx)(t.code,{children:"API"})," module file.\nBoth should ideally be in a folder called ",(0,i.jsx)(t.code,{children:"apigear"})," next to each other."]}),"\n",(0,i.jsxs)(t.p,{children:["Alternatively, you can also use the ",(0,i.jsx)(t.em,{children:"Studio"})," to create a new project and modify the two example files."]}),"\n",(0,i.jsx)(t.h3,{id:"solution-file",children:"Solution file"}),"\n",(0,i.jsxs)(t.p,{children:["Create a ",(0,i.jsx)(t.a,{href:"/docs/start/first_steps#create-a-solution",children:"solution"})," file.\nThe example below specifies"]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["module files in ",(0,i.jsx)(t.em,{children:"line 8"}),", here the ",(0,i.jsx)(t.code,{children:"helloworld.module.yaml"})," module with ",(0,i.jsx)(t.code,{children:"Hello"})," API"]}),"\n",(0,i.jsxs)(t.li,{children:["the output directory for generated files in ",(0,i.jsx)(t.em,{children:"line 9"})]}),"\n",(0,i.jsxs)(t.li,{children:["a template used to generate the code in ",(0,i.jsx)(t.em,{children:"line 10"}),", here the ",(0,i.jsx)(t.code,{children:"apigear-ui/template-qtcpp"})," template. This can also be a path to a local copy of the template."]}),"\n",(0,i.jsxs)(t.li,{children:["the enabled features of the template in ",(0,i.jsx)(t.em,{children:"line 13"}),", here the ",(0,i.jsx)(t.code,{children:"stubs"})," feature, a simple implementation of interfaces. For all available features check the ",(0,i.jsx)(t.a,{href:"/template-qt6/docs/features/",children:"overview"}),"."]}),"\n"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",metastring:'title="helloworld.solution.yaml" showLineNumbers',children:'schema: "apigear.solution/1.0"\nname: hello_world_example\nversion: "0.1.0"\n\ntargets:\n  - name: qt_hello_world\n    inputs:\n      - helloworld.module.yaml\n    output: ../qt_hello_world\n    template: apigear-io/template-qtcpp\n    force: true\n    features:\n      - stubs\n'})}),"\n",(0,i.jsx)(t.admonition,{title:"Targets",type:"tip",children:(0,i.jsx)(t.p,{children:"You can extend this solution file with other targets, each for the different technology with  different template. The module.yaml is technology independent and may be used for any template."})}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"Set the force parameter to true if you want to always override all the generated files. With option set to false some files, like implementation (stub feature) won't be updated. All the API files are always updated."})}),"\n",(0,i.jsx)(t.h3,{id:"api-module-file",children:"API module file"}),"\n",(0,i.jsxs)(t.p,{children:["Use your favorite text editor to create the ",(0,i.jsx)(t.code,{children:"helloworld.module.yaml"})," with the example content:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-yaml",metastring:'title="helloworld.module.yaml" showLineNumbers',children:'schema: apigear.module/1.0\nname: io.world\nversion: "1.0.0"\n\ninterfaces:\n  - name: Hello\n    properties:\n      - { name: last, type: Message }\n    operations:\n      - name: say\n        params:\n          - { name: msg, type: Message }\n          - { name: when, type: When }\n        return:\n          type: int\n    signals:\n      - name: justSaid\n        params:\n          - { name: msg, type: Message }\nenums:\n  - name: When\n    members:\n      - { name: Now, value: 0 }\n      - { name: Soon, value: 1 }\n      - { name: Never, value: 2 }\nstructs:\n  - name: Message\n    fields:\n      - { name: content, type: string }\n'})}),"\n",(0,i.jsx)(t.h2,{id:"4-generate-code",children:"4. Generate code"}),"\n",(0,i.jsxs)(t.p,{children:["With the output directory set as in example, both ",(0,i.jsx)(t.em,{children:"ApiGear"})," files reside in an ",(0,i.jsx)(t.code,{children:"apigear"})," subfolder next to the ",(0,i.jsx)(t.em,{children:"Qt"})," generated files.\nIn this case the folder structure should look similar to this"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"\ud83d\udcc2hello-world\n \u2523 \ud83d\udcc2apigear\n \u2503 \u2523 \ud83d\udcdchelloworld.solution.yaml\n \u2503 \u2517 \ud83d\udcdchelloworld.module.yaml\n \u2523 \ud83d\udcc2qt_hello_world\n # highlight-next-line\n \u2503 \u2523 \ud83d\udcc2io_world\n \u2503 \u2503 \u2523 \ud83d\udcc2api\n \u2503 \u2503 \u2517 \ud83d\udcc2implementation\n \u2503 \u2517 \ud83d\udcdcCMakeLists.txt\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Using the solution file from the previous paragraph the code will be generated in the ",(0,i.jsx)(t.code,{children:"qt_hello_world"})," folder.\nWith subfolder for each module, here ",(0,i.jsx)(t.code,{children:"io_world"})," as the name of module (defined in line 2 of ",(0,i.jsx)(t.code,{children:"helloworld.module.yaml"}),").\nIt contains both features generated: a basic api and a stub implementation."]}),"\n",(0,i.jsx)(t.h3,{id:"generate-via-cli",children:"Generate via CLI"}),"\n",(0,i.jsx)(t.p,{children:"The following snippet shows how the CLI can be run."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"$ apigear generate solution apigear/helloworld.solution.yaml \n10:52:20 INF generated 21 files in 30ms. (20 write, 0 skip, 1 copy) topic=gen\n"})}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"generate"})," tells the CLI that it should generate code"]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"solution"})," specifies that we want to run a solution file"]}),"\n"]}),"\n",(0,i.jsx)(t.h3,{id:"generate-via-studio",children:"Generate via Studio"}),"\n",(0,i.jsxs)(t.ol,{children:["\n",(0,i.jsx)(t.li,{children:"Open the project"}),"\n",(0,i.jsxs)(t.li,{children:["Go to the ",(0,i.jsx)(t.code,{children:"Solutions"})," tab"]}),"\n",(0,i.jsxs)(t.li,{children:["Click ",(0,i.jsx)(t.code,{children:"Run"})," on the ",(0,i.jsx)(t.code,{children:"helloworld.solution.yaml"})," entry"]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"5-use-the-generated-qt-project",children:"5. Use the generated Qt project."}),"\n",(0,i.jsxs)(t.p,{children:["The generated code provides Qt ",(0,i.jsx)(t.em,{children:"C++"})," implementations. The following paragraphs show how you can use it.\nYou can start your project loading the top level CMakeLists.txt in ",(0,i.jsx)(t.code,{children:"qt_hello_world"})," folder."]}),"\n",(0,i.jsxs)(t.p,{children:["The 'api.h' contains all definitions of the enums and structs for your module, as well as the QObject abstract base classes for your Interfaces.\nFrom now on you can simply include the header files for the api interface or the stub implementation and use it.\nFor more details on generated features please check ",(0,i.jsx)(t.a,{href:"/template-qt6/docs/features/api",children:"api"}),", ",(0,i.jsx)(t.a,{href:"/template-qt6/docs/features/stubs",children:"stubs"}),"."]}),"\n",(0,i.jsx)(t.admonition,{type:"tip",children:(0,i.jsxs)(t.p,{children:['Check the "example" and ',(0,i.jsx)(t.a,{href:"/template-qt6/docs/features/qmlplugin",children:"qmlplugin"})," features to see how to use your API directly in qml with the generated wrappers."]})}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsx)(t.p,{children:"For the pure virtual interface see the pure C++ template"})}),"\n",(0,i.jsx)(t.admonition,{type:"note",children:(0,i.jsxs)(t.p,{children:["For the simulation check ",(0,i.jsx)(t.a,{href:"/template-qt6/docs/features/olink",children:"the olink feature"})," which provides middle layer on your code side and the ",(0,i.jsx)(t.a,{href:"/docs/advanced/simulation/intro",children:"simulation"})," explained."]})}),"\n",(0,i.jsx)(t.h3,{id:"create-and-run-an-example",children:"Create and run an example"}),"\n",(0,i.jsxs)(t.p,{children:["Prepare an ",(0,i.jsx)(t.code,{children:"examples"})," folder in the ",(0,i.jsx)(t.code,{children:"hello-world/qt_hello_world"})," directory with a main.cpp like this:"]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-cpp",children:'#include <QGuiApplication>\n#include "io_world/implementation/hello.h"\nint main(int argc, char *argv[])\n{\n    QGuiApplication app(argc, argv);\n    io_world::Hello myHelloInstance;\n\n\n    // Try out properties: subscribe for changes\n    myHelloInstance.connect(&myHelloInstance, &io_world::AbstractHello::lastChanged,\n                            []( const io_world::Message& last){ qDebug() << "last property changed ";});\n    // and ask for change.\n    io_world::Message messageForProperty;\n    messageForProperty.m_content = QString("New message");\n    myHelloInstance.setLast(messageForProperty);\n\n    // Check the signals with subscribing for its change\n    myHelloInstance.connect(&myHelloInstance, &io_world::AbstractHello::justSaid,\n                            [](const io_world::Message& msg){ qDebug() << "justSaid signal emitted ";});\n    // and emit one.\n    io_world::Message messageForSignal;\n    messageForSignal.m_content = QString("Message from signal");\n    emit myHelloInstance.justSaid(messageForSignal);\n\n    // Play around executing operations, maybe they emit signals? or change the properties?\n    auto method_result = myHelloInstance.say(io_world::Message(), io_world::When::Now);\n\n    return app.exec();\n}\n'})}),"\n",(0,i.jsx)(t.p,{children:"add a CMakeLists.txt"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-bash",children:"project(MyExample)\ncmake_minimum_required(VERSION 3.20)\n\nfind_package(Qt6 REQUIRED COMPONENTS Gui)\n\nset(CMAKE_CXX_STANDARD 14)\nset(CMAKE_CXX_STANDARD_REQUIRED ON)\n\nadd_executable(MyExample main.cpp)\n\nfind_package(io_world QUIET COMPONENTS io_world_impl)\ntarget_link_libraries(MyExample io_world_impl Qt6::Gui)\n"})}),"\n",(0,i.jsxs)(t.p,{children:["Add the ",(0,i.jsx)(t.code,{children:"example"})," subdirectory to the hello-world/qt_hello_world/CMakeLists.txt. Now you can build the application and the libraries with it and run your example."]})]})}function h(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var i=n(6540);const l={},a=i.createContext(l);function s(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:s(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);