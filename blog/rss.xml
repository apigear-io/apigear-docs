<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>The future of API driven workflows Blog</title>
        <link>https://apigear.io/blog</link>
        <description>The future of API driven workflows Blog</description>
        <lastBuildDate>Mon, 27 Feb 2023 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[API surface for objects]]></title>
            <link>https://apigear.io/blog/api-surface</link>
            <guid>https://apigear.io/blog/api-surface</guid>
            <pubDate>Mon, 27 Feb 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Overview of a typical API surface for objects in an IDL.]]></description>
            <content:encoded><![CDATA[<p>An API surface is the public interface of an object which is exposed to users of the object. The API surface is defined by an IDL and defines the contract between the user and the implementer of an object.</p>
<p>The API surface for an object consists of the following parts:</p>
<ul>
<li>Properties: Properties are the state of an object. They can be read and written and notify users about changes. Properties can be of any type.</li>
<li>Operations: Operations are functions that can be called on an object. They can be synchronous or asynchronous. Operations can receive parameters and return a value.</li>
<li>Signals: Signals are events that can be emitted by an object. They can be received by users of the object.</li>
</ul>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">interface name {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `prop-name` : type                     // property</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    `operation-name` ( params ): `type`       // operation</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    signal `signal-name` ( params )        // signal</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>For example a heating system could have the following API surface:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">interface HeatingSystem {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    temperature: float</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    setTemperature(float temperature)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    signal maxTemperatureReached()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>As users of an API you can use the API surface to understand how to use an object. You can also use the API surface to understand how to implement an object. The API surface is the contract between the user and the implementer of an object.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="properties">Properties<a href="https://apigear.io/blog/api-surface#properties" class="hash-link" aria-label="Direct link to Properties" title="Direct link to Properties">​</a></h2>
<p>Properties are the state of an object. They can be read and written and notify users about changes. Properties can be of any type.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">interface HeatingSystem {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    temperature: float</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>In the example above the <code>temperature</code> property is of type <code>float</code>. The type can be any type that is supported by the IDL. The type can be a primitive type or a complex type. A primitive type can be one of the following:</p>
<ul>
<li><code>int</code> : integer value</li>
<li><code>float</code> : floating point value</li>
<li><code>string</code> : string value</li>
<li><code>bool</code> : boolean value</li>
</ul>
<p>Types can also be arrays. To define arrays of a type just append the <code>[]</code> to the type (for example <code>int[]</code>).</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="operations">Operations<a href="https://apigear.io/blog/api-surface#operations" class="hash-link" aria-label="Direct link to Operations" title="Direct link to Operations">​</a></h2>
<p>Operations are functions that can be called on an object. They can be synchronous or asynchronous. Operations can receive parameters and return a value.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">interface HeatingSystem {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    setTemperature(float temperature)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>In the example above the <code>setTemperature</code> operation receives a parameter of type <code>float</code>. The operation does not return a value.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="signals">Signals<a href="https://apigear.io/blog/api-surface#signals" class="hash-link" aria-label="Direct link to Signals" title="Direct link to Signals">​</a></h2>
<p>Signals are events that can be emitted by an object. They can be received by users of the object.</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">interface HeatingSystem {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    signal maxTemperatureReached()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>In the example above the <code>maxTemperatureReached</code> signal does not receive any parameters.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="structures">Structures<a href="https://apigear.io/blog/api-surface#structures" class="hash-link" aria-label="Direct link to Structures" title="Direct link to Structures">​</a></h2>
<p>Different than objects which can be interacted with, structures are just data structures that can be used to send complex information between objects. A structure is defined as follows:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">struct Struct1 {}</span><br></span></code></pre></div></div>
<p>A struct can have fields of any type.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="enumerations">Enumerations<a href="https://apigear.io/blog/api-surface#enumerations" class="hash-link" aria-label="Direct link to Enumerations" title="Direct link to Enumerations">​</a></h2>
<p>An enumeration is a set of named values. An enumeration is defined as follows:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">enum Enum1 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    value1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    value2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre></div></div>
<p>An enumeration can be used as a type for properties, operations and signals.</p>
<h2 class="anchor anchorWithStickyNavbar_LWe7" id="modules">Modules<a href="https://apigear.io/blog/api-surface#modules" class="hash-link" aria-label="Direct link to Modules" title="Direct link to Modules">​</a></h2>
<p>A module is a collection of objects, structures and enumerations. A module is defined as follows:</p>
<div class="language-text codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_QJqH"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">module name version</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">interface Name {}</span><br></span></code></pre></div></div>
<p>The version of a module is a string that follows the <a href="https://semver.org/" target="_blank" rel="noopener noreferrer">semver</a> format. The version of a module is optional. If no version is specified the version is <code>0.0.0</code>.</p>
<h1>Working with the API surface</h1>
<p>When designing an API surface it is important to keep the following in mind:</p>]]></content:encoded>
            <category>api</category>
            <category>idl</category>
        </item>
    </channel>
</rss>